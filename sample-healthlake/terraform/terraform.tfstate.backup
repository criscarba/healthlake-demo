{
  "version": 4,
  "terraform_version": "1.9.2",
  "serial": 239,
  "lineage": "628f7b28-f941-a983-c385-a79f681f2be1",
  "outputs": {
    "audio_input_bucket": {
      "value": "gocathlab-healthlake-audio-input-070pnfyf",
      "type": "string"
    },
    "audio_transcription_function": {
      "value": "gocathlab-healthlake-audio-transcription",
      "type": "string"
    },
    "client_access_role_arn": {
      "value": "arn:aws:iam::365528423741:role/gocathlab-healthlake-client-access-role",
      "type": "string"
    },
    "clinical_notes_nlp_function": {
      "value": "gocathlab-healthlake-clinical-notes-nlp",
      "type": "string"
    },
    "cloudwatch_log_group": {
      "value": "/aws/healthlake/gocathlab-healthlake",
      "type": "string"
    },
    "fhir_resource_creator_function": {
      "value": "gocathlab-healthlake-fhir-resource-creator",
      "type": "string"
    },
    "fhir_source_bucket_arn": {
      "value": "arn:aws:s3:::gocathlab-healthlake-fhir-source-070pnfyf",
      "type": "string"
    },
    "fhir_source_bucket_name": {
      "value": "gocathlab-healthlake-fhir-source-070pnfyf",
      "type": "string"
    },
    "healthlake_datastore_arn": {
      "value": "arn:aws:healthlake:us-east-1:365528423741:datastore/fhir/bc5ab8737e204a4d06d385e5664938f5",
      "type": "string"
    },
    "healthlake_datastore_endpoint": {
      "value": "https://healthlake.us-east-1.amazonaws.com/datastore/bc5ab8737e204a4d06d385e5664938f5/r4/",
      "type": "string"
    },
    "healthlake_datastore_id": {
      "value": "bc5ab8737e204a4d06d385e5664938f5",
      "type": "string"
    },
    "import_role_arn": {
      "value": "arn:aws:iam::365528423741:role/gocathlab-healthlake-healthlake-import-role",
      "type": "string"
    },
    "kms_key_arn": {
      "value": "AWS_OWNED_KMS_KEY",
      "type": "string"
    },
    "kms_key_id": {
      "value": "AWS_OWNED_KMS_KEY",
      "type": "string"
    },
    "lambda_function_arn": {
      "value": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-import-orchestrator",
      "type": "string"
    },
    "lambda_function_name": {
      "value": "gocathlab-healthlake-import-orchestrator",
      "type": "string"
    },
    "nlp_input_bucket": {
      "value": "gocathlab-healthlake-nlp-input-070pnfyf",
      "type": "string"
    },
    "nlp_output_bucket": {
      "value": "gocathlab-healthlake-nlp-output-070pnfyf",
      "type": "string"
    },
    "staging_bucket_arn": {
      "value": "arn:aws:s3:::gocathlab-healthlake-staging-070pnfyf",
      "type": "string"
    },
    "staging_bucket_name": {
      "value": "gocathlab-healthlake-staging-070pnfyf",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "archive_file",
      "name": "lambda_zip",
      "provider": "provider[\"registry.terraform.io/hashicorp/archive\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "exclude_symlink_directories": null,
            "excludes": null,
            "id": "a295eab216fa27defdf7fba51d0b33032887c2ec",
            "output_base64sha256": "x+3oJXDA3JwJMPmxCJq9kHow4OZ0QHowm27TQSJly0g=",
            "output_base64sha512": "bpiUCQHRXwTnxpQc6fs6O8+eBq3Q0ergub7+7ve0oP17/j0kQ2QM9Dn1t5X/81D7UF9N2RV6li87/Lcd1cb7Hg==",
            "output_file_mode": null,
            "output_md5": "c438d71c4bfcf6290745f794a74a16b2",
            "output_path": "healthlake_import.zip",
            "output_sha": "a295eab216fa27defdf7fba51d0b33032887c2ec",
            "output_sha256": "c7ede82570c0dc9c0930f9b1089abd907a30e0e674407a309b6ed3412265cb48",
            "output_sha512": "6e98940901d15f04e7c6941ce9fb3a3bcf9e06add0d1eae0b9befeeef7b4a0fd7bfe3d2443640cf439f5b795fff350fb505f4dd9157a962f3bfcb71dd5c6fb1e",
            "output_size": 2352,
            "source": [
              {
                "content": "import json\nimport boto3\nimport os\nimport logging\nfrom datetime import datetime\nfrom urllib.parse import unquote_plus\n\n# Configure logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n# Initialize AWS clients\nhealthlake_client = boto3.client('healthlake')\ns3_client = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    \"\"\"\n    Lambda function to orchestrate FHIR data import into HealthLake\n    Triggered by S3 object creation events\n    \"\"\"\n    \n    # Get environment variables\n    datastore_id = os.environ['HEALTHLAKE_DATASTORE_ID']\n    import_role_arn = os.environ['HEALTHLAKE_IMPORT_ROLE_ARN']\n    staging_bucket = os.environ['STAGING_BUCKET']\n    \n    try:\n        # Process each S3 event record\n        for record in event['Records']:\n            # Extract S3 event details\n            bucket_name = record['s3']['bucket']['name']\n            object_key = unquote_plus(record['s3']['object']['key'])\n            \n            logger.info(f\"Processing file: s3://{bucket_name}/{object_key}\")\n            \n            # Check if it's a FHIR JSON file\n            if not object_key.endswith('.json'):\n                logger.info(f\"Skipping non-JSON file: {object_key}\")\n                continue\n            \n            # Read the FHIR resource from S3\n            try:\n                response = s3_client.get_object(Bucket=bucket_name, Key=object_key)\n                fhir_content = response['Body'].read().decode('utf-8')\n                fhir_resource = json.loads(fhir_content)\n                \n                # Validate it's a FHIR resource\n                if 'resourceType' not in fhir_resource:\n                    logger.error(f\"Invalid FHIR resource in {object_key}: missing resourceType\")\n                    continue\n                \n                logger.info(f\"Found FHIR {fhir_resource['resourceType']} resource\")\n                \n            except Exception as e:\n                logger.error(f\"Error reading FHIR resource from {object_key}: {str(e)}\")\n                continue\n            \n            # Copy file to staging bucket for HealthLake import\n            staging_key = f\"import-ready/{datetime.now().strftime('%Y/%m/%d')}/{object_key.split('/')[-1]}\"\n            \n            try:\n                # Copy to staging bucket\n                copy_source = {'Bucket': bucket_name, 'Key': object_key}\n                s3_client.copy_object(\n                    CopySource=copy_source,\n                    Bucket=staging_bucket,\n                    Key=staging_key,\n                    MetadataDirective='COPY'\n                )\n                \n                logger.info(f\"Copied to staging: s3://{staging_bucket}/{staging_key}\")\n                \n                # Create HealthLake import job\n                import_job_response = start_healthlake_import(\n                    datastore_id,\n                    staging_bucket,\n                    staging_key,\n                    import_role_arn,\n                    fhir_resource['resourceType']\n                )\n                \n                logger.info(f\"Started HealthLake import job: {import_job_response['JobId']}\")\n                \n                # Store job metadata for tracking\n                job_metadata = {\n                    'jobId': import_job_response['JobId'],\n                    'status': import_job_response['JobStatus'],\n                    'submittedAt': datetime.now().isoformat(),  # Use current time instead\n                    'sourceFile': f\"s3://{bucket_name}/{object_key}\",\n                    'stagingFile': f\"s3://{staging_bucket}/{staging_key}\",\n                    'resourceType': fhir_resource['resourceType'],\n                    'resourceId': fhir_resource.get('id', 'unknown')\n                }\n                \n                # Store job tracking info in S3\n                tracking_key = f\"import-jobs/{import_job_response['JobId']}.json\"\n                s3_client.put_object(\n                    Bucket=staging_bucket,\n                    Key=tracking_key,\n                    Body=json.dumps(job_metadata, indent=2),\n                    ContentType='application/json'\n                )\n                \n            except Exception as e:\n                logger.error(f\"Error processing HealthLake import for {object_key}: {str(e)}\")\n                continue\n        \n        return {\n            'statusCode': 200,\n            'body': json.dumps({\n                'message': f'Successfully processed {len(event[\"Records\"])} files',\n                'timestamp': datetime.now().isoformat()\n            })\n        }\n        \n    except Exception as e:\n        logger.error(f\"Error in lambda_handler: {str(e)}\")\n        return {\n            'statusCode': 500,\n            'body': json.dumps({\n                'error': str(e),\n                'timestamp': datetime.now().isoformat()\n            })\n        }\n\ndef start_healthlake_import(datastore_id, bucket, key, role_arn, resource_type):\n    \"\"\"\n    Start a HealthLake import job for a single FHIR resource\n    \"\"\"\n    \n    job_name = f\"import-{resource_type}-{datetime.now().strftime('%Y%m%d-%H%M%S')}\"\n    \n    try:\n        response = healthlake_client.start_fhir_import_job(\n            JobName=job_name,\n            InputDataConfig={\n                'S3Uri': f\"s3://{bucket}/{key}\"\n            },\n            JobOutputDataConfig={\n                'S3Configuration': {\n                    'S3Uri': f\"s3://{bucket}/import-results/\",\n                    'KmsKeyId': 'alias/aws/s3'  # Use AWS managed S3 key\n                }\n            },\n            DatastoreId=datastore_id,\n            DataAccessRoleArn=role_arn,\n            ClientToken=f\"{job_name}-{datetime.now().strftime('%Y%m%d%H%M%S')}\"\n        )\n        \n        return response\n        \n    except Exception as e:\n        logger.error(f\"Error starting HealthLake import job: {str(e)}\")\n        raise\n\ndef validate_fhir_resource(resource):\n    \"\"\"\n    Basic validation of FHIR resource structure\n    \"\"\"\n    required_fields = ['resourceType']\n    \n    for field in required_fields:\n        if field not in resource:\n            return False, f\"Missing required field: {field}\"\n    \n    # Additional validation for specific resource types\n    resource_type = resource.get('resourceType')\n    \n    if resource_type == 'Patient':\n        if 'identifier' not in resource and 'name' not in resource:\n            return False, \"Patient resource must have either identifier or name\"\n    \n    elif resource_type == 'Observation':\n        required_obs_fields = ['status', 'code', 'subject']\n        for field in required_obs_fields:\n            if field not in resource:\n                return False, f\"Observation missing required field: {field}\"\n    \n    elif resource_type == 'Procedure':\n        required_proc_fields = ['status', 'code', 'subject']\n        for field in required_proc_fields:\n            if field not in resource:\n                return False, f\"Procedure missing required field: {field}\"\n    \n    return True, \"Valid FHIR resource\"\n\ndef get_import_job_status(job_id):\n    \"\"\"\n    Check the status of a HealthLake import job\n    \"\"\"\n    try:\n        response = healthlake_client.describe_fhir_import_job(\n            DatastoreId=os.environ['HEALTHLAKE_DATASTORE_ID'],\n            JobId=job_id\n        )\n        return response\n    except Exception as e:\n        logger.error(f\"Error getting import job status: {str(e)}\")\n        return None\n\ndef process_batch_import(bucket, prefix):\n    \"\"\"\n    Process multiple FHIR files as a batch import\n    This function can be called separately for bulk imports\n    \"\"\"\n    datastore_id = os.environ['HEALTHLAKE_DATASTORE_ID']\n    import_role_arn = os.environ['HEALTHLAKE_IMPORT_ROLE_ARN']\n    \n    job_name = f\"batch-import-{datetime.now().strftime('%Y%m%d-%H%M%S')}\"\n    \n    try:\n        response = healthlake_client.start_fhir_import_job(\n            JobName=job_name,\n            InputDataConfig={\n                'S3Uri': f\"s3://{bucket}/{prefix}\"\n            },\n            JobOutputDataConfig={\n                'S3Configuration': {\n                    'S3Uri': f\"s3://{bucket}/batch-import-results/\",\n                    'KmsKeyId': 'alias/aws/s3'  # Use AWS managed S3 key\n                }\n            },\n            DatastoreId=datastore_id,\n            DataAccessRoleArn=import_role_arn,\n            ClientToken=f\"{job_name}-{datetime.now().strftime('%Y%m%d%H%M%S')}\"\n        )\n        \n        logger.info(f\"Started batch import job: {response['JobId']}\")\n        return response\n        \n    except Exception as e:\n        logger.error(f\"Error starting batch import job: {str(e)}\")\n        raise",
                "filename": "lambda_function.py"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "archive_file",
      "name": "lambda_zip_audio_transcription",
      "provider": "provider[\"registry.terraform.io/hashicorp/archive\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "exclude_symlink_directories": null,
            "excludes": null,
            "id": "a698929fd67fb17cbdc40f3c1a7130810927d4fa",
            "output_base64sha256": "+bsUpg99/nFIFouVusTGPmAKfJJUSm5/uEjza4J+nKY=",
            "output_base64sha512": "Sd73u6I2Czo1ILbl2P2Jo/Gw1sNMATuc1yH5rPaZQfA3wlZbVGJ+t97LDtbxFqkDlVjYXvWcL0XI7h9dJLgX8w==",
            "output_file_mode": null,
            "output_md5": "c5774dd2cba35ca598cec2badbd48822",
            "output_path": "audio_transcription.zip",
            "output_sha": "a698929fd67fb17cbdc40f3c1a7130810927d4fa",
            "output_sha256": "f9bb14a60f7dfe7148168b95bac4c63e600a7c92544a6e7fb848f36b827e9ca6",
            "output_sha512": "49def7bba2360b3a3520b6e5d8fd89a3f1b0d6c34c013b9cd721f9acf69941f037c2565b54627eb7decb0ed6f116a9039558d85ef59c2f45c8ee1f5d24b817f3",
            "output_size": 3774,
            "source": [
              {
                "content": "import json\nimport boto3\nimport urllib.parse\nimport logging\nimport uuid\nimport time\nfrom datetime import datetime\nfrom typing import Dict, Any, Optional\nimport os\n\n# Configure logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n# Initialize AWS clients\ntranscribe_client = boto3.client('transcribe')\ns3_client = boto3.client('s3')\ncomprehend_medical = boto3.client('comprehendmedical')\n\ndef handler(event, context):\n    \"\"\"\n    Lambda function to transcribe medical audio files using Amazon Transcribe Medical\n    and then process the transcription with Comprehend Medical\n    \"\"\"\n    try:\n        # Parse S3 event\n        bucket = event['Records'][0]['s3']['bucket']['name']\n        key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'])\n        \n        logger.info(f\"Processing audio file: {key} from bucket: {bucket}\")\n        \n        # Start medical transcription job\n        job_name = start_medical_transcription(bucket, key)\n        \n        # Wait for transcription to complete and get results\n        transcription_text = wait_for_transcription_completion(job_name)\n        \n        if transcription_text:\n            # Process transcription with Comprehend Medical\n            nlp_results = process_transcription_with_nlp(transcription_text, key)\n            \n            # Save results to output bucket\n            save_transcription_results(nlp_results, key)\n            \n            return {\n                'statusCode': 200,\n                'body': json.dumps({\n                    'message': 'Audio transcription and NLP processing completed',\n                    'job_name': job_name,\n                    'input_file': key,\n                    'transcription_length': len(transcription_text),\n                    'entities_detected': len(nlp_results.get('entities', []))\n                })\n            }\n        else:\n            raise Exception(\"Transcription failed or returned empty results\")\n            \n    except Exception as e:\n        logger.error(f\"Error processing audio file: {str(e)}\")\n        raise e\n\ndef start_medical_transcription(bucket: str, key: str) -\u003e str:\n    \"\"\"\n    Start a medical transcription job\n    \"\"\"\n    job_name = f\"gocathlab-transcription-{uuid.uuid4().hex[:8]}-{int(time.time())}\"\n    \n    media_uri = f\"s3://{bucket}/{key}\"\n    \n    # Determine media format from file extension\n    file_extension = key.split('.')[-1].lower()\n    media_format = {\n        'wav': 'wav',\n        'mp3': 'mp3',\n        'mp4': 'mp4',\n        'flac': 'flac',\n        'm4a': 'mp4'\n    }.get(file_extension, 'wav')\n    \n    try:\n        response = transcribe_client.start_medical_transcription_job(\n            MedicalTranscriptionJobName=job_name,\n            LanguageCode='en-US',\n            MediaSampleRateHertz=16000,  # Adjust based on your audio files\n            MediaFormat=media_format,\n            Media={\n                'MediaFileUri': media_uri\n            },\n            OutputBucketName=os.environ['TRANSCRIPTION_RESULTS_BUCKET'],\n            OutputKey=f\"transcriptions/{job_name}/\",\n            Specialty='CARDIOLOGY',\n            Type='CONVERSATION',  # or 'DICTATION' depending on audio type\n            Settings={\n                'ShowSpeakerLabels': True,\n                'MaxSpeakerLabels': 4,\n                'ChannelIdentification': False,\n                'ShowAlternatives': True,\n                'MaxAlternatives': 3\n                # Removed VocabularyFilterMethod - not supported in Medical Transcribe\n            }\n        )\n        \n        logger.info(f\"Started medical transcription job: {job_name}\")\n        return job_name\n        \n    except Exception as e:\n        logger.error(f\"Error starting transcription job: {str(e)}\")\n        raise e\n\ndef wait_for_transcription_completion(job_name: str, max_wait_time: int = 900) -\u003e Optional[str]:\n    \"\"\"\n    Wait for transcription job to complete and return the transcription text\n    \"\"\"\n    start_time = time.time()\n    \n    while time.time() - start_time \u003c max_wait_time:\n        try:\n            response = transcribe_client.get_medical_transcription_job(\n                MedicalTranscriptionJobName=job_name\n            )\n            \n            status = response['MedicalTranscriptionJob']['TranscriptionJobStatus']\n            logger.info(f\"Transcription job {job_name} status: {status}\")\n            \n            if status == 'COMPLETED':\n                # Get transcription results\n                transcript_uri = response['MedicalTranscriptionJob']['Transcript']['TranscriptFileUri']\n                return download_transcription_results(transcript_uri)\n                \n            elif status == 'FAILED':\n                failure_reason = response['MedicalTranscriptionJob'].get('FailureReason', 'Unknown')\n                raise Exception(f\"Transcription job failed: {failure_reason}\")\n                \n            # Wait before checking again\n            time.sleep(30)\n            \n        except Exception as e:\n            logger.error(f\"Error checking transcription status: {str(e)}\")\n            raise e\n    \n    raise Exception(f\"Transcription job {job_name} did not complete within {max_wait_time} seconds\")\n\ndef download_transcription_results(transcript_uri: str) -\u003e str:\n    \"\"\"\n    Download transcription results from S3 URI\n    \"\"\"\n    try:\n        # Parse S3 URI\n        uri_parts = transcript_uri.replace('s3://', '').split('/', 1)\n        bucket = uri_parts[0]\n        key = uri_parts[1]\n        \n        # Download transcription file\n        response = s3_client.get_object(Bucket=bucket, Key=key)\n        transcript_data = json.loads(response['Body'].read().decode('utf-8'))\n        \n        # Extract transcript text\n        transcript_text = transcript_data['results']['transcripts'][0]['transcript']\n        \n        logger.info(f\"Downloaded transcription: {len(transcript_text)} characters\")\n        return transcript_text\n        \n    except Exception as e:\n        logger.error(f\"Error downloading transcription results: {str(e)}\")\n        raise e\n\ndef process_transcription_with_nlp(transcription_text: str, original_key: str) -\u003e Dict[str, Any]:\n    \"\"\"\n    Process transcription text with Amazon Comprehend Medical\n    \"\"\"\n    results = {\n        'timestamp': datetime.utcnow().isoformat(),\n        'processing_id': str(uuid.uuid4()),\n        'original_audio_file': original_key,\n        'transcription_text': transcription_text,\n        'entities': [],\n        'phi_entities': [],\n        'medications': [],\n        'procedures': [],\n        'diagnoses': [],\n        'cardiovascular_entities': [],\n        'cath_lab_specific': []\n    }\n    \n    try:\n        # Detect medical entities\n        entity_response = comprehend_medical.detect_entities_v2(Text=transcription_text)\n        results['entities'] = entity_response.get('Entities', [])\n        \n        # Detect PHI\n        phi_response = comprehend_medical.detect_phi(Text=transcription_text)\n        results['phi_entities'] = phi_response.get('Entities', [])\n        \n        # Process and categorize entities\n        categorize_transcription_entities(results)\n        \n        # Extract cath lab specific information\n        extract_cath_lab_entities(results)\n        \n        logger.info(f\"Processed transcription with {len(results['entities'])} entities\")\n        \n    except Exception as e:\n        logger.error(f\"Error in Comprehend Medical processing: {str(e)}\")\n        results['error'] = str(e)\n    \n    return results\n\ndef categorize_transcription_entities(results: Dict[str, Any]) -\u003e None:\n    \"\"\"\n    Categorize entities from transcription into relevant categories\n    \"\"\"\n    for entity in results['entities']:\n        category = entity.get('Category', '').upper()\n        entity_type = entity.get('Type', '').upper()\n        text = entity.get('Text', '').lower()\n        \n        if category == 'MEDICATION':\n            results['medications'].append({\n                'text': entity.get('Text'),\n                'confidence': entity.get('Score'),\n                'type': entity_type,\n                'attributes': entity.get('Attributes', []),\n                'source': 'audio_transcription'\n            })\n        \n        elif category == 'MEDICAL_CONDITION':\n            results['diagnoses'].append({\n                'text': entity.get('Text'),\n                'confidence': entity.get('Score'),\n                'type': entity_type,\n                'attributes': entity.get('Attributes', []),\n                'source': 'audio_transcription'\n            })\n        \n        elif category == 'PROCEDURE':\n            results['procedures'].append({\n                'text': entity.get('Text'),\n                'confidence': entity.get('Score'),\n                'type': entity_type,\n                'attributes': entity.get('Attributes', []),\n                'source': 'audio_transcription'\n            })\n\ndef extract_cath_lab_entities(results: Dict[str, Any]) -\u003e None:\n    \"\"\"\n    Extract cath lab specific entities and cardiovascular information\n    \"\"\"\n    # Cath lab specific terms\n    cath_lab_terms = [\n        'catheter', 'guidewire', 'balloon', 'stent', 'contrast',\n        'fluoroscopy', 'angiography', 'hemodynamics', 'pressure',\n        'injection', 'vessel', 'artery', 'coronary', 'lad', 'rca', 'lcx',\n        'stenosis', 'occlusion', 'thrombus', 'dissection',\n        'complications', 'bleeding', 'hematoma', 'perforation',\n        'access site', 'femoral', 'radial', 'closure device',\n        'procedure time', 'contrast volume', 'radiation dose'\n    ]\n    \n    # Cardiovascular procedures specific to cath lab\n    cath_procedures = [\n        'angioplasty', 'ptca', 'pci', 'stenting', 'atherectomy',\n        'thrombectomy', 'balloon angioplasty', 'drug eluting stent',\n        'bare metal stent', 'rotablation', 'cutting balloon',\n        'intravascular ultrasound', 'ivus', 'oct', 'ffr',\n        'fractional flow reserve', 'instantaneous wave free ratio'\n    ]\n    \n    # Extract cath lab specific entities\n    transcription_text = results['transcription_text'].lower()\n    \n    for term in cath_lab_terms + cath_procedures:\n        if term in transcription_text:\n            # Find all occurrences\n            start_pos = 0\n            while True:\n                pos = transcription_text.find(term, start_pos)\n                if pos == -1:\n                    break\n                \n                results['cath_lab_specific'].append({\n                    'text': term,\n                    'category': 'cath_lab_equipment' if term in cath_lab_terms else 'cath_lab_procedure',\n                    'position': pos,\n                    'context': transcription_text[max(0, pos-50):pos+len(term)+50],\n                    'source': 'audio_transcription'\n                })\n                \n                start_pos = pos + 1\n    \n    # Also check existing entities for cardiovascular relevance\n    cardio_keywords = [\n        'coronary', 'cardiac', 'heart', 'cardiovascular', 'vessel',\n        'artery', 'stenosis', 'ischemia', 'myocardial', 'angina'\n    ]\n    \n    for entity in results['entities']:\n        entity_text = entity.get('Text', '').lower()\n        if any(keyword in entity_text for keyword in cardio_keywords):\n            results['cardiovascular_entities'].append({\n                'text': entity.get('Text'),\n                'confidence': entity.get('Score'),\n                'category': entity.get('Category'),\n                'type': entity.get('Type'),\n                'begin_offset': entity.get('BeginOffset'),\n                'end_offset': entity.get('EndOffset'),\n                'source': 'audio_transcription'\n            })\n\ndef save_transcription_results(results: Dict[str, Any], original_key: str) -\u003e None:\n    \"\"\"\n    Save transcription and NLP results to S3\n    \"\"\"\n    try:\n        output_bucket = os.environ['NLP_OUTPUT_BUCKET']\n        \n        # Save detailed results\n        output_key = f\"transcriptions/{original_key.replace('.wav', '_transcription_results.json').replace('.mp3', '_transcription_results.json')}\"\n        \n        s3_client.put_object(\n            Bucket=output_bucket,\n            Key=output_key,\n            Body=json.dumps(results, indent=2),\n            ContentType='application/json'\n        )\n        \n        # Save summary for quick access\n        summary = {\n            'timestamp': results['timestamp'],\n            'original_file': original_key,\n            'transcription_length': len(results['transcription_text']),\n            'total_entities': len(results['entities']),\n            'cardiovascular_entities': len(results['cardiovascular_entities']),\n            'cath_lab_entities': len(results['cath_lab_specific']),\n            'medications_found': len(results['medications']),\n            'procedures_found': len(results['procedures']),\n            'diagnoses_found': len(results['diagnoses'])\n        }\n        \n        summary_key = f\"transcriptions/summaries/{original_key.replace('.wav', '_summary.json').replace('.mp3', '_summary.json')}\"\n        \n        s3_client.put_object(\n            Bucket=output_bucket,\n            Key=summary_key,\n            Body=json.dumps(summary, indent=2),\n            ContentType='application/json'\n        )\n        \n        logger.info(f\"Transcription results saved to: {output_key}\")\n        logger.info(f\"Summary saved to: {summary_key}\")\n        \n    except Exception as e:\n        logger.error(f\"Error saving transcription results: {str(e)}\")\n        raise e",
                "filename": "index.py"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "archive_file",
      "name": "lambda_zip_clinical_notes_nlp",
      "provider": "provider[\"registry.terraform.io/hashicorp/archive\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "exclude_symlink_directories": null,
            "excludes": null,
            "id": "dc88939c1685e0e91e4767538c35907fbf1eef08",
            "output_base64sha256": "FwnWs70Dwdby6gyuCFnIlNvBMBhvvBQTJJKlGaegWIQ=",
            "output_base64sha512": "mSEM0PzzpRzJ14MuFv5YovT/FiD7s6ibg8ST63xtPKhtgFJuLkUBtjzUy7DUMxOJVJ/q6hiVSZU8Do2yDZXP+g==",
            "output_file_mode": null,
            "output_md5": "6cce2a4a694598cabe430324b992c08d",
            "output_path": "clinical_notes_nlp.zip",
            "output_sha": "dc88939c1685e0e91e4767538c35907fbf1eef08",
            "output_sha256": "1709d6b3bd03c1d6f2ea0cae0859c894dbc130186fbc14132492a519a7a05884",
            "output_sha512": "99210cd0fcf3a51cc9d7832e16fe58a2f4ff1620fbb3a89b83c493eb7c6d3ca86d80526e2e4501b63cd4cbb0d4331389549feaea189549953c0e8db20d95cffa",
            "output_size": 2299,
            "source": [
              {
                "content": "import json\nimport boto3\nimport urllib.parse\nimport logging\nfrom typing import Dict, List, Any\nimport uuid\nfrom datetime import datetime\nimport os\n\n# Configure logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n# Initialize AWS clients\ncomprehend_medical = boto3.client('comprehendmedical')\ns3_client = boto3.client('s3')\n\ndef handler(event, context):\n    \"\"\"\n    Lambda function to process clinical notes using Amazon Comprehend Medical\n    Triggered by S3 object creation events\n    \"\"\"\n    try:\n        # Parse S3 event\n        bucket = event['Records'][0]['s3']['bucket']['name']\n        key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'])\n        \n        logger.info(f\"Processing file: {key} from bucket: {bucket}\")\n        \n        # Read the clinical note from S3\n        response = s3_client.get_object(Bucket=bucket, Key=key)\n        clinical_text = response['Body'].read().decode('utf-8')\n        \n        # Process with Comprehend Medical\n        nlp_results = process_clinical_text(clinical_text)\n        \n        # Save results to output bucket\n        output_bucket = os.environ['NLP_OUTPUT_BUCKET']\n        output_key = f\"processed/{key.replace('.txt', '_processed.json')}\"\n        \n        s3_client.put_object(\n            Bucket=output_bucket,\n            Key=output_key,\n            Body=json.dumps(nlp_results, indent=2),\n            ContentType='application/json'\n        )\n        \n        logger.info(f\"NLP processing complete. Results saved to: {output_key}\")\n        \n        return {\n            'statusCode': 200,\n            'body': json.dumps({\n                'message': 'NLP processing completed successfully',\n                'input_file': key,\n                'output_file': output_key,\n                'entities_detected': len(nlp_results.get('entities', []))\n            })\n        }\n        \n    except Exception as e:\n        logger.error(f\"Error processing clinical note: {str(e)}\")\n        raise e\n\ndef process_clinical_text(text: str) -\u003e Dict[str, Any]:\n    \"\"\"\n    Process clinical text using Amazon Comprehend Medical\n    Extract entities relevant to cardiovascular care\n    \"\"\"\n    results = {\n        'timestamp': datetime.utcnow().isoformat(),\n        'processing_id': str(uuid.uuid4()),\n        'original_text': text,\n        'entities': [],\n        'phi_entities': [],\n        'medications': [],\n        'procedures': [],\n        'diagnoses': [],\n        'cardiovascular_entities': []\n    }\n    \n    try:\n        # Detect medical entities\n        entity_response = comprehend_medical.detect_entities_v2(Text=text)\n        results['entities'] = entity_response.get('Entities', [])\n        \n        # Detect PHI\n        phi_response = comprehend_medical.detect_phi(Text=text)\n        results['phi_entities'] = phi_response.get('Entities', [])\n        \n        # Process and categorize entities\n        categorize_entities(results)\n        \n        # Extract cardiovascular-specific information\n        extract_cardiovascular_entities(results)\n        \n        logger.info(f\"Processed {len(results['entities'])} entities\")\n        \n    except Exception as e:\n        logger.error(f\"Error in Comprehend Medical processing: {str(e)}\")\n        results['error'] = str(e)\n    \n    return results\n\ndef categorize_entities(results: Dict[str, Any]) -\u003e None:\n    \"\"\"\n    Categorize entities into medications, procedures, and diagnoses\n    \"\"\"\n    for entity in results['entities']:\n        category = entity.get('Category', '').upper()\n        entity_type = entity.get('Type', '').upper()\n        text = entity.get('Text', '').lower()\n        \n        if category == 'MEDICATION':\n            results['medications'].append({\n                'text': entity.get('Text'),\n                'confidence': entity.get('Score'),\n                'type': entity_type,\n                'attributes': entity.get('Attributes', [])\n            })\n        \n        elif category == 'MEDICAL_CONDITION':\n            results['diagnoses'].append({\n                'text': entity.get('Text'),\n                'confidence': entity.get('Score'),\n                'type': entity_type,\n                'attributes': entity.get('Attributes', [])\n            })\n        \n        elif category == 'PROCEDURE':\n            results['procedures'].append({\n                'text': entity.get('Text'),\n                'confidence': entity.get('Score'),\n                'type': entity_type,\n                'attributes': entity.get('Attributes', [])\n            })\n\ndef extract_cardiovascular_entities(results: Dict[str, Any]) -\u003e None:\n    \"\"\"\n    Extract and flag cardiovascular-specific entities\n    \"\"\"\n    # Cardiovascular-related terms\n    cardio_medications = [\n        'statin', 'atorvastatin', 'simvastatin', 'rosuvastatin',\n        'beta-blocker', 'metoprolol', 'carvedilol', 'atenolol',\n        'ace inhibitor', 'lisinopril', 'enalapril', 'captopril',\n        'arb', 'losartan', 'valsartan', 'telmisartan',\n        'calcium channel blocker', 'amlodipine', 'diltiazem',\n        'diuretic', 'furosemide', 'hydrochlorothiazide',\n        'anticoagulant', 'warfarin', 'apixaban', 'rivaroxaban',\n        'antiplatelet', 'aspirin', 'clopidogrel', 'prasugrel'\n    ]\n    \n    cardio_procedures = [\n        'angioplasty', 'stent', 'stenting', 'catheterization',\n        'cardiac catheterization', 'cath lab', 'pci',\n        'percutaneous coronary intervention', 'cabg',\n        'coronary artery bypass', 'valve replacement',\n        'angiogram', 'coronary angiography', 'echocardiogram',\n        'stress test', 'ekg', 'electrocardiogram',\n        'holter monitor', 'cardiac mri', 'ct angiography'\n    ]\n    \n    cardio_conditions = [\n        'coronary artery disease', 'cad', 'myocardial infarction',\n        'heart attack', 'angina', 'chest pain', 'arrhythmia',\n        'atrial fibrillation', 'heart failure', 'chf',\n        'hypertension', 'high blood pressure', 'hyperlipidemia',\n        'high cholesterol', 'atherosclerosis', 'stenosis',\n        'valve disease', 'cardiomyopathy', 'pericarditis',\n        'endocarditis', 'aortic stenosis', 'mitral regurgitation'\n    ]\n    \n    # Check all entities for cardiovascular relevance\n    for entity in results['entities']:\n        entity_text = entity.get('Text', '').lower()\n        category = entity.get('Category', '').upper()\n        \n        is_cardio = False\n        cardio_type = None\n        \n        if any(term in entity_text for term in cardio_medications):\n            is_cardio = True\n            cardio_type = 'cardiovascular_medication'\n        elif any(term in entity_text for term in cardio_procedures):\n            is_cardio = True\n            cardio_type = 'cardiovascular_procedure'\n        elif any(term in entity_text for term in cardio_conditions):\n            is_cardio = True\n            cardio_type = 'cardiovascular_condition'\n        \n        if is_cardio:\n            results['cardiovascular_entities'].append({\n                'text': entity.get('Text'),\n                'confidence': entity.get('Score'),\n                'category': category,\n                'cardiovascular_type': cardio_type,\n                'begin_offset': entity.get('BeginOffset'),\n                'end_offset': entity.get('EndOffset'),\n                'attributes': entity.get('Attributes', [])\n            })",
                "filename": "index.py"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "archive_file",
      "name": "lambda_zip_fhir_resource_creator",
      "provider": "provider[\"registry.terraform.io/hashicorp/archive\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "exclude_symlink_directories": null,
            "excludes": null,
            "id": "ee9c5cb8c4c7981d86a02a0b546c343b1c872845",
            "output_base64sha256": "2f7g+k5LmFYCFvZLz1Xydlyy5yWK6EHlcRTy796ADH8=",
            "output_base64sha512": "UT7AW2Cs072EwClYAOZapi1kbL4yU+0yfn/rlEr+0TToxW11eLeJv9jJKEcl91LSyv8HN+rf2wrHt7WFUvF+zg==",
            "output_file_mode": null,
            "output_md5": "f1a486c70443ebfc3c45dcbd5090b2d5",
            "output_path": "fhir_resource_creator.zip",
            "output_sha": "ee9c5cb8c4c7981d86a02a0b546c343b1c872845",
            "output_sha256": "d9fee0fa4e4b98560216f64bcf55f2765cb2e7258ae841e57114f2efde800c7f",
            "output_sha512": "513ec05b60acd3bd84c0295800e65aa62d646cbe3253ed327e7feb944afed134e8c56d7578b789bfd8c9284725f752d2caff0737eadfdb0ac7b7b58552f17ece",
            "output_size": 5421,
            "source": [
              {
                "content": "import json\nimport boto3\nimport logging\nimport uuid\nfrom datetime import datetime, timezone\nfrom typing import Dict, List, Any, Optional\nimport os\nimport urllib3\nimport base64\nfrom botocore.auth import SigV4Auth\nfrom botocore.awsrequest import AWSRequest\n\n# Configure logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ndef get_fhir_datetime() -\u003e str:\n    \"\"\"\n    Get properly formatted FHIR datetime with timezone\n    \"\"\"\n    return datetime.now(timezone.utc).isoformat().replace('+00:00', 'Z')\n\n# Initialize AWS clients\ns3_client = boto3.client('s3')\nsession = boto3.Session()\ncredentials = session.get_credentials()\n\ndef handler(event, context):\n    \"\"\"\n    Lambda function to create FHIR resources from NLP processing results\n    and store them in AWS HealthLake\n    \"\"\"\n    try:\n        logger.info(\"Starting FHIR resource creation from NLP results\")\n        \n        # This function can be triggered by EventBridge or directly\n        if 'Records' in event:\n            # Triggered by S3 event\n            bucket = event['Records'][0]['s3']['bucket']['name']\n            key = event['Records'][0]['s3']['object']['key']\n            nlp_results = load_nlp_results_from_s3(bucket, key)\n        else:\n            # Triggered by EventBridge or manual invocation\n            # Look for recent NLP results in the output bucket\n            nlp_results = get_latest_nlp_results()\n        \n        if not nlp_results:\n            logger.warning(\"No NLP results found to process\")\n            return {'statusCode': 200, 'body': 'No results to process'}\n        \n        # Create FHIR resources\n        fhir_resources = create_fhir_resources_from_nlp(nlp_results)\n        \n        # Store resources in HealthLake\n        healthlake_responses = store_resources_in_healthlake(fhir_resources)\n        \n        # Save processing summary\n        save_processing_summary(nlp_results, fhir_resources, healthlake_responses)\n        \n        return {\n            'statusCode': 200,\n            'body': json.dumps({\n                'message': 'FHIR resources created successfully',\n                'resources_created': len(fhir_resources),\n                'healthlake_responses': len(healthlake_responses)\n            })\n        }\n        \n    except Exception as e:\n        logger.error(f\"Error creating FHIR resources: {str(e)}\")\n        raise e\n\ndef load_nlp_results_from_s3(bucket: str, key: str) -\u003e Dict[str, Any]:\n    \"\"\"\n    Load NLP results from S3\n    \"\"\"\n    try:\n        response = s3_client.get_object(Bucket=bucket, Key=key)\n        nlp_results = json.loads(response['Body'].read().decode('utf-8'))\n        logger.info(f\"Loaded NLP results from {key}\")\n        return nlp_results\n    except Exception as e:\n        logger.error(f\"Error loading NLP results: {str(e)}\")\n        return {}\n\ndef get_latest_nlp_results() -\u003e Dict[str, Any]:\n    \"\"\"\n    Get the latest NLP results from the output bucket\n    \"\"\"\n    try:\n        bucket = os.environ['NLP_OUTPUT_BUCKET']\n        \n        # List recent objects in the processed folder\n        response = s3_client.list_objects_v2(\n            Bucket=bucket,\n            Prefix='processed/',\n            MaxKeys=10\n        )\n        \n        if 'Contents' in response:\n            # Get the most recent file\n            latest_object = max(response['Contents'], key=lambda x: x['LastModified'])\n            return load_nlp_results_from_s3(bucket, latest_object['Key'])\n        \n        return {}\n        \n    except Exception as e:\n        logger.error(f\"Error getting latest NLP results: {str(e)}\")\n        return {}\n\ndef create_fhir_resources_from_nlp(nlp_results: Dict[str, Any]) -\u003e List[Dict[str, Any]]:\n    \"\"\"\n    Create FHIR resources from NLP processing results\n    \"\"\"\n    fhir_resources = []\n    \n    # Step 1: Extract patient info from PHI entities and create Patient resource\n    patient_resource = create_patient_from_phi(nlp_results)\n    fhir_resources.append(patient_resource)\n    \n    patient_id = patient_resource['id']\n    \n    # Step 2: Create DocumentReference for the source text\n    document_ref = create_document_reference(nlp_results, patient_id)\n    fhir_resources.append(document_ref)\n    \n    # Step 3: Create medical findings linked to this patient\n    observations = create_cardiovascular_observations(nlp_results, patient_id)\n    fhir_resources.extend(observations)\n    \n    medication_statements = create_medication_statements(nlp_results, patient_id)\n    fhir_resources.extend(medication_statements)\n    \n    conditions = create_condition_resources(nlp_results, patient_id)\n    fhir_resources.extend(conditions)\n    \n    logger.info(f\"Created {len(fhir_resources)} FHIR resources for patient {patient_id}\")\n    return fhir_resources\n\ndef create_patient_from_phi(nlp_results: Dict[str, Any]) -\u003e Dict[str, Any]:\n    \"\"\"\n    Create a Patient resource from PHI entities extracted by Comprehend Medical\n    \"\"\"\n    patient_id = str(uuid.uuid4())\n    phi_entities = nlp_results.get('phi_entities', [])\n    \n    # Extract patient information from PHI entities\n    patient_info = {\n        'names': [],\n        'ages': [],\n        'ids': [],\n        'dates': [],\n        'addresses': []\n    }\n    \n    # Process PHI entities to extract patient demographics\n    for phi in phi_entities:\n        phi_type = phi.get('Type', '').upper()\n        phi_text = phi.get('Text', '').strip()\n        \n        if phi_type == 'NAME' and phi_text:\n            patient_info['names'].append(phi_text)\n        elif phi_type == 'AGE' and phi_text:\n            patient_info['ages'].append(phi_text)\n        elif phi_type == 'ID' and phi_text:\n            patient_info['ids'].append(phi_text)\n        elif phi_type == 'DATE' and phi_text:\n            patient_info['dates'].append(phi_text)\n        elif phi_type == 'ADDRESS' and phi_text:\n            patient_info['addresses'].append(phi_text)\n    \n    # Build Patient resource\n    patient_resource = {\n        'resourceType': 'Patient',\n        'id': patient_id,\n        'meta': {\n            'tag': [{\n                'system': 'http://gocathlab.com/fhir/tags',\n                'code': 'nlp-extracted',\n                'display': 'NLP Extracted Patient'\n            }]\n        },\n        'active': True\n    }\n    \n    # Add identifiers if found\n    identifiers = []\n    for i, patient_id_text in enumerate(patient_info['ids']):\n        identifiers.append({\n            'use': 'usual',\n            'type': {\n                'coding': [{\n                    'system': 'http://terminology.hl7.org/CodeSystem/v2-0203',\n                    'code': 'MR',\n                    'display': 'Medical Record Number'\n                }]\n            },\n            'system': 'http://gocathlab.com/patient-id',\n            'value': patient_id_text[:50]  # Limit length\n        })\n    \n    if identifiers:\n        patient_resource['identifier'] = identifiers\n    \n    # Add names if found\n    names = []\n    for name_text in patient_info['names']:\n        # Try to parse name (simple approach)\n        name_parts = name_text.split()\n        if len(name_parts) \u003e= 2:\n            names.append({\n                'use': 'usual',\n                'family': name_parts[-1][:50],  # Last part as family name\n                'given': [part[:50] for part in name_parts[:-1]][:3]  # First parts as given names\n            })\n        else:\n            names.append({\n                'use': 'usual',\n                'text': name_text[:100]\n            })\n    \n    if names:\n        patient_resource['name'] = names[:1]  # Use first name found\n    else:\n        # Fallback name if no PHI name found\n        patient_resource['name'] = [{\n            'use': 'usual',\n            'text': 'Patient from Clinical Note'\n        }]\n    \n    # Add birth date if age found (approximate)\n    if patient_info['ages']:\n        try:\n            age_text = patient_info['ages'][0]\n            # Extract numeric age\n            age_match = next((char for char in age_text if char.isdigit()), None)\n            if age_match:\n                age = int(''.join(filter(str.isdigit, age_text)))\n                if 0 \u003c age \u003c 150:  # Reasonable age range\n                    birth_year = datetime.now().year - age\n                    patient_resource['birthDate'] = f\"{birth_year}-01-01\"\n        except:\n            pass  # Skip if age parsing fails\n    \n    # Add addresses if found\n    if patient_info['addresses']:\n        addresses = []\n        for addr_text in patient_info['addresses'][:1]:  # Use first address\n            addresses.append({\n                'use': 'home',\n                'text': addr_text[:200]  # Limit length\n            })\n        patient_resource['address'] = addresses\n    \n    # Set gender as unknown since we don't extract it from PHI\n    patient_resource['gender'] = 'unknown'\n    \n    logger.info(f\"Created patient from PHI: Names={len(patient_info['names'])}, Ages={len(patient_info['ages'])}, IDs={len(patient_info['ids'])}\")\n    \n    return patient_resource\n\ndef create_document_reference(nlp_results: Dict[str, Any], patient_id: str) -\u003e Dict[str, Any]:\n    \"\"\"\n    Create a DocumentReference for the source clinical text\n    \"\"\"\n    doc_ref_id = str(uuid.uuid4())\n    \n    # Determine document type based on source\n    doc_type = 'clinical-note'\n    if 'original_audio_file' in nlp_results:\n        doc_type = 'audio-transcription'\n    \n    # Get the text content\n    content_text = nlp_results.get('original_text', nlp_results.get('transcription_text', ''))\n    \n    return {\n        'resourceType': 'DocumentReference',\n        'id': doc_ref_id,\n        'meta': {\n            'tag': [{\n                'system': 'http://gocathlab.com/fhir/tags',\n                'code': 'nlp-source',\n                'display': 'NLP Source Document'\n            }]\n        },\n        'status': 'current',\n        'type': {\n            'coding': [{\n                'system': 'http://loinc.org',\n                'code': '11506-3',\n                'display': 'Progress note'\n            }]\n        },\n        'subject': {\n            'reference': f'Patient/{patient_id}'\n        },\n        'date': get_fhir_datetime(),\n        'content': [{\n            'attachment': {\n                'contentType': 'text/plain',\n                'size': len(content_text.encode('utf-8')),\n                'title': 'Clinical Note',\n                'data': base64.b64encode(content_text.encode('utf-8')).decode('ascii')\n            },\n            'format': {\n                'system': 'http://ihe.net/fhir/ihe.formatcode.fhir/CodeSystem/formatcode',\n                'code': 'urn:ihe:iti:xds:2017:mimeTypeSufficient',\n                'display': 'mimeType Sufficient'\n            }\n        }]\n    }\n\ndef create_cardiovascular_observations(nlp_results: Dict[str, Any], patient_id: str) -\u003e List[Dict[str, Any]]:\n    \"\"\"\n    Create Observation resources for cardiovascular entities\n    \"\"\"\n    observations = []\n    \n    cardio_entities = nlp_results.get('cardiovascular_entities', [])\n    \n    # Create observations for cardiovascular entities only (limit cath lab for now)\n    for entity in cardio_entities[:5]:  # Limit to first 5 to avoid too many resources\n        obs_id = str(uuid.uuid4())\n        \n        observation = {\n            'resourceType': 'Observation',\n            'id': obs_id,\n            'meta': {\n                'tag': [{\n                    'system': 'http://gocathlab.com/fhir/tags',\n                    'code': 'nlp-extracted',\n                    'display': 'NLP Extracted'\n                }]\n            },\n            'status': 'final',\n            'category': [{\n                'coding': [{\n                    'system': 'http://terminology.hl7.org/CodeSystem/observation-category',\n                    'code': 'survey',\n                    'display': 'Survey'\n                }]\n            }],\n            'code': {\n                'coding': [{\n                    'system': 'http://snomed.info/sct',\n                    'code': '404684003',\n                    'display': 'Clinical finding'\n                }],\n                'text': entity.get('text', '')[:50]  # Limit text length\n            },\n            'subject': {\n                'reference': f'Patient/{patient_id}'\n            },\n            'effectiveDateTime': get_fhir_datetime(),\n            'valueString': entity.get('text', '')[:100]  # Limit value length\n            # Remove component for now to avoid validation issues\n            # 'component': [{\n            #     'code': {\n            #         'coding': [{\n            #             'system': 'http://gocathlab.com/fhir/nlp',\n            #             'code': 'confidence-score',\n            #             'display': 'NLP Confidence Score'\n            #         }]\n            #     },\n            #     'valueDecimal': round(entity.get('confidence', 0.0), 3)\n            # }]\n        }\n        \n        observations.append(observation)\n    \n    return observations\n\ndef create_medication_statements(nlp_results: Dict[str, Any], patient_id: str) -\u003e List[Dict[str, Any]]:\n    \"\"\"\n    Create MedicationStatement resources for detected medications\n    \"\"\"\n    medication_statements = []\n    \n    medications = nlp_results.get('medications', [])\n    \n    for medication in medications[:3]:  # Limit to first 3 medications\n        med_statement_id = str(uuid.uuid4())\n        \n        statement = {\n            'resourceType': 'MedicationStatement',\n            'id': med_statement_id,\n            'meta': {\n                'tag': [{\n                    'system': 'http://gocathlab.com/fhir/tags',\n                    'code': 'nlp-extracted',\n                    'display': 'NLP Extracted Medication'\n                }]\n            },\n            'status': 'unknown',\n            'medicationCodeableConcept': {\n                'text': medication.get('text', '')[:100]  # Limit text length\n            },\n            'subject': {\n                'reference': f'Patient/{patient_id}'\n            },\n            'effectiveDateTime': get_fhir_datetime()\n        }\n        \n        medication_statements.append(statement)\n    \n    return medication_statements\n\ndef create_procedure_resources(nlp_results: Dict[str, Any], patient_id: str) -\u003e List[Dict[str, Any]]:\n    \"\"\"\n    Create Procedure resources for detected procedures\n    \"\"\"\n    procedures = []\n    \n    procedure_entities = nlp_results.get('procedures', [])\n    \n    for procedure in procedure_entities:\n        procedure_id = str(uuid.uuid4())\n        \n        proc_resource = {\n            'resourceType': 'Procedure',\n            'id': procedure_id,\n            'meta': {\n                'tag': [{\n                    'system': 'http://gocathlab.com/fhir/tags',\n                    'code': 'nlp-extracted',\n                    'display': 'NLP Extracted Procedure'\n                }]\n            },\n            'status': 'unknown',\n            'code': {\n                'coding': [{\n                    'system': 'http://snomed.info/sct',\n                    'display': procedure.get('text', '')\n                }],\n                'text': procedure.get('text', '')\n            },\n            'subject': {\n                'reference': f'Patient/{patient_id}'\n            },\n            'performedDateTime': nlp_results.get('timestamp', datetime.utcnow().isoformat()),\n            'note': [{\n                'text': f\"Extracted from clinical text with confidence: {procedure.get('confidence', 0.0)}\"\n            }]\n        }\n        \n        procedures.append(proc_resource)\n    \n    return procedures\n\ndef create_condition_resources(nlp_results: Dict[str, Any], patient_id: str) -\u003e List[Dict[str, Any]]:\n    \"\"\"\n    Create Condition resources for detected diagnoses\n    \"\"\"\n    conditions = []\n    \n    diagnoses = nlp_results.get('diagnoses', [])\n    \n    for diagnosis in diagnoses[:3]:  # Limit to first 3 conditions\n        condition_id = str(uuid.uuid4())\n        \n        condition = {\n            'resourceType': 'Condition',\n            'id': condition_id,\n            'meta': {\n                'tag': [{\n                    'system': 'http://gocathlab.com/fhir/tags',\n                    'code': 'nlp-extracted',\n                    'display': 'NLP Extracted Condition'\n                }]\n            },\n            'clinicalStatus': {\n                'coding': [{\n                    'system': 'http://terminology.hl7.org/CodeSystem/condition-clinical',\n                    'code': 'active',\n                    'display': 'Active'\n                }]\n            },\n            'verificationStatus': {\n                'coding': [{\n                    'system': 'http://terminology.hl7.org/CodeSystem/condition-ver-status',\n                    'code': 'unconfirmed',\n                    'display': 'Unconfirmed'\n                }]\n            },\n            'code': {\n                'text': diagnosis.get('text', '')[:100]  # Limit text length\n            },\n            'subject': {\n                'reference': f'Patient/{patient_id}'\n            },\n            'recordedDate': get_fhir_datetime()\n        }\n        \n        conditions.append(condition)\n    \n    return conditions\n\ndef store_resources_in_healthlake(fhir_resources: List[Dict[str, Any]]) -\u003e List[Dict[str, Any]]:\n    \"\"\"\n    Store FHIR resources in AWS HealthLake using the FHIR API\n    \"\"\"\n    healthlake_endpoint = os.environ['HEALTHLAKE_ENDPOINT']\n    datastore_id = os.environ['DATASTORE_ID']\n    \n    responses = []\n    http = urllib3.PoolManager()\n    \n    # Remove '/datastore/{id}' from endpoint if present and add it back\n    base_endpoint = healthlake_endpoint.split('/datastore/')[0] if '/datastore/' in healthlake_endpoint else healthlake_endpoint\n    fhir_base_url = f\"{base_endpoint}/datastore/{datastore_id}/r4\"\n    \n    logger.info(f\"Using FHIR base URL: {fhir_base_url}\")\n    \n    for resource in fhir_resources:\n        try:\n            resource_type = resource['resourceType']\n            resource_id = resource['id']\n            \n            # Create the FHIR resource using PUT (create with specific ID)\n            url = f\"{fhir_base_url}/{resource_type}/{resource_id}\"\n            \n            # Prepare the request\n            body = json.dumps(resource).encode('utf-8')\n            \n            # Create AWS request for signing\n            request = AWSRequest(\n                method='PUT',\n                url=url,\n                data=body,\n                headers={\n                    'Content-Type': 'application/fhir+json',\n                    'Accept': 'application/fhir+json'\n                }\n            )\n            \n            # Sign the request with AWS credentials\n            SigV4Auth(credentials, 'healthlake', session.region_name).add_auth(request)\n            \n            # Make the HTTP request\n            response = http.request(\n                method='PUT',\n                url=url,\n                body=body,\n                headers=dict(request.headers)\n            )\n            \n            logger.info(f\"HealthLake response for {resource_type}/{resource_id}: Status {response.status}\")\n            \n            if response.status in [200, 201]:\n                # Successfully created/updated\n                response_data = {\n                    'resourceType': resource_type,\n                    'id': resource_id,\n                    'status': 'created',\n                    'httpStatus': response.status,\n                    'location': url\n                }\n                \n                # Try to parse response body\n                try:\n                    response_body = json.loads(response.data.decode('utf-8'))\n                    response_data['fhir_response'] = response_body\n                except:\n                    response_data['raw_response'] = response.data.decode('utf-8')\n                    \n            else:\n                # Error occurred\n                error_body = response.data.decode('utf-8') if response.data else 'Unknown error'\n                logger.error(f\"HealthLake validation error for {resource_type}/{resource_id}: {error_body}\")\n                \n                response_data = {\n                    'resourceType': resource_type,\n                    'id': resource_id,\n                    'status': 'error',\n                    'httpStatus': response.status,\n                    'error': error_body\n                }\n            \n            responses.append(response_data)\n            logger.info(f\"Stored {resource_type} with ID {resource_id}: {response_data['status']}\")\n            \n        except Exception as e:\n            logger.error(f\"Error storing {resource.get('resourceType', 'Unknown')} resource: {str(e)}\")\n            responses.append({\n                'resourceType': resource.get('resourceType', 'Unknown'),\n                'id': resource.get('id', 'Unknown'),\n                'status': 'error',\n                'error': str(e)\n            })\n    \n    return responses\n\ndef save_processing_summary(nlp_results: Dict[str, Any], fhir_resources: List[Dict[str, Any]], healthlake_responses: List[Dict[str, Any]]) -\u003e None:\n    \"\"\"\n    Save a summary of the FHIR processing results\n    \"\"\"\n    try:\n        summary = {\n            'timestamp': datetime.utcnow().isoformat(),\n            'processing_id': str(uuid.uuid4()),\n            'source_file': nlp_results.get('original_text', nlp_results.get('original_audio_file', 'unknown')),\n            'nlp_entities_processed': len(nlp_results.get('entities', [])),\n            'fhir_resources_created': len(fhir_resources),\n            'healthlake_responses': len(healthlake_responses),\n            'resource_breakdown': {\n                resource_type: len([r for r in fhir_resources if r['resourceType'] == resource_type])\n                for resource_type in set(r['resourceType'] for r in fhir_resources)\n            },\n            'successful_stores': len([r for r in healthlake_responses if r.get('status') == 'created']),\n            'failed_stores': len([r for r in healthlake_responses if r.get('status') == 'error'])\n        }\n        \n        output_bucket = os.environ['NLP_OUTPUT_BUCKET']\n        summary_key = f\"fhir-processing/summary_{summary['processing_id']}.json\"\n        \n        s3_client.put_object(\n            Bucket=output_bucket,\n            Key=summary_key,\n            Body=json.dumps(summary, indent=2),\n            ContentType='application/json'\n        )\n        \n        logger.info(f\"Processing summary saved to: {summary_key}\")\n        \n    except Exception as e:\n        logger.error(f\"Error saving processing summary: {str(e)}\")\n        # Don't raise exception here as it's not critical to the main process",
                "filename": "index.py"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "365528423741",
            "arn": "arn:aws:iam::365528423741:user/iamadmin",
            "id": "365528423741",
            "user_id": "AIDAVKGZRDU65MKULBMM2"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_region",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "US East (N. Virginia)",
            "endpoint": "ec2.us-east-1.amazonaws.com",
            "id": "us-east-1",
            "name": "us-east-1"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "audio_transcription_logs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-east-1:365528423741:log-group:/aws/lambda/gocathlab-healthlake-audio-transcription",
            "id": "/aws/lambda/gocathlab-healthlake-audio-transcription",
            "kms_key_id": "",
            "log_group_class": "STANDARD",
            "name": "/aws/lambda/gocathlab-healthlake-audio-transcription",
            "name_prefix": "",
            "retention_in_days": 14,
            "skip_destroy": false,
            "tags": {
              "Name": "Audio Transcription Logs",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "Audio Transcription Logs",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.nlp_lambda_policy_attachment",
            "aws_lambda_function.audio_transcription",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip_audio_transcription",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "clinical_notes_nlp_logs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-east-1:365528423741:log-group:/aws/lambda/gocathlab-healthlake-clinical-notes-nlp",
            "id": "/aws/lambda/gocathlab-healthlake-clinical-notes-nlp",
            "kms_key_id": "",
            "log_group_class": "STANDARD",
            "name": "/aws/lambda/gocathlab-healthlake-clinical-notes-nlp",
            "name_prefix": "",
            "retention_in_days": 14,
            "skip_destroy": false,
            "tags": {
              "Name": "Clinical Notes NLP Logs",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "Clinical Notes NLP Logs",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.nlp_lambda_policy_attachment",
            "aws_lambda_function.clinical_notes_nlp",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip_clinical_notes_nlp",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "fhir_resource_creator_logs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-east-1:365528423741:log-group:/aws/lambda/gocathlab-healthlake-fhir-resource-creator",
            "id": "/aws/lambda/gocathlab-healthlake-fhir-resource-creator",
            "kms_key_id": "",
            "log_group_class": "STANDARD",
            "name": "/aws/lambda/gocathlab-healthlake-fhir-resource-creator",
            "name_prefix": "",
            "retention_in_days": 14,
            "skip_destroy": false,
            "tags": {
              "Name": "FHIR Resource Creator Logs",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "FHIR Resource Creator Logs",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.nlp_lambda_policy_attachment",
            "aws_lambda_function.fhir_resource_creator",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip_fhir_resource_creator",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "healthlake_logs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-east-1:365528423741:log-group:/aws/healthlake/gocathlab-healthlake",
            "id": "/aws/healthlake/gocathlab-healthlake",
            "kms_key_id": "",
            "log_group_class": "STANDARD",
            "name": "/aws/healthlake/gocathlab-healthlake",
            "name_prefix": "",
            "retention_in_days": 30,
            "skip_destroy": false,
            "tags": {
              "Name": "gocathlab-healthlake-healthlake-logs"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "gocathlab-healthlake-healthlake-logs",
              "Project": "GoCathLab-HealthLake"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "gocathlab_healthlake_read_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-client-read-policy",
            "attachment_count": 1,
            "description": "Read access to HealthLake for GoCathLab team",
            "id": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-client-read-policy",
            "name": "gocathlab-healthlake-client-read-policy",
            "name_prefix": "",
            "path": "/",
            "policy": "{\"Statement\":[{\"Action\":[\"healthlake:DescribeFHIRDatastore\",\"healthlake:DescribeFHIRImportJob\",\"healthlake:DescribeFHIRExportJob\",\"healthlake:ListFHIRDatastores\",\"healthlake:ReadResource\",\"healthlake:SearchWithGet\",\"healthlake:SearchWithPost\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:healthlake:us-east-1:365528423741:datastore/fhir/bc5ab8737e204a4d06d385e5664938f5\",\"arn:aws:healthlake:us-east-1:365528423741:datastore/fhir/bc5ab8737e204a4d06d385e5664938f5/*\"]},{\"Action\":[\"logs:DescribeLogGroups\",\"logs:DescribeLogStreams\",\"logs:GetLogEvents\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:logs:us-east-1:365528423741:log-group:/aws/healthlake/gocathlab-healthlake\",\"arn:aws:logs:us-east-1:365528423741:log-group:/aws/healthlake/gocathlab-healthlake:*\"]}],\"Version\":\"2012-10-17\"}",
            "policy_id": "ANPAVKGZRDU6SNWQO3K64",
            "tags": {},
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Project": "GoCathLab-HealthLake"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "awscc_healthlake_fhir_datastore.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "healthlake_import_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-healthlake-import-policy",
            "attachment_count": 1,
            "description": "Policy for HealthLake to access S3 for data import",
            "id": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-healthlake-import-policy",
            "name": "gocathlab-healthlake-healthlake-import-policy",
            "name_prefix": "",
            "path": "/",
            "policy": "{\"Statement\":[{\"Action\":[\"s3:*\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:s3:::gocathlab-healthlake-staging-070pnfyf\",\"arn:aws:s3:::gocathlab-healthlake-staging-070pnfyf/*\"]},{\"Action\":[\"kms:*\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}],\"Version\":\"2012-10-17\"}",
            "policy_id": "ANPAVKGZRDU6355NIFKFC",
            "tags": {},
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Project": "GoCathLab-HealthLake"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.healthlake_staging",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "healthlake_logging_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-healthlake-logging-policy",
            "attachment_count": 1,
            "description": "Policy for HealthLake CloudWatch logging",
            "id": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-healthlake-logging-policy",
            "name": "gocathlab-healthlake-healthlake-logging-policy",
            "name_prefix": "",
            "path": "/",
            "policy": "{\"Statement\":[{\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\",\"logs:DescribeLogGroups\",\"logs:DescribeLogStreams\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:logs:us-east-1:365528423741:log-group:/aws/healthlake/gocathlab-healthlake\",\"arn:aws:logs:us-east-1:365528423741:log-group:/aws/healthlake/gocathlab-healthlake:*\"]}],\"Version\":\"2012-10-17\"}",
            "policy_id": "ANPAVKGZRDU67XIUZR35V",
            "tags": {},
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Project": "GoCathLab-HealthLake"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "lambda_import_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-lambda-import-policy",
            "attachment_count": 1,
            "description": "Policy for Lambda to orchestrate HealthLake data imports",
            "id": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-lambda-import-policy",
            "name": "gocathlab-healthlake-lambda-import-policy",
            "name_prefix": "",
            "path": "/",
            "policy": "{\"Statement\":[{\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:logs:us-east-1:365528423741:*\"},{\"Action\":[\"healthlake:StartFHIRImportJob\",\"healthlake:DescribeFHIRImportJob\",\"healthlake:ListFHIRImportJobs\",\"healthlake:DescribeFHIRDatastore\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:healthlake:us-east-1:365528423741:datastore/fhir/bc5ab8737e204a4d06d385e5664938f5\",\"arn:aws:healthlake:us-east-1:365528423741:datastore/fhir/bc5ab8737e204a4d06d385e5664938f5/*\"]},{\"Action\":[\"s3:*\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:s3:::gocathlab-healthlake-fhir-source-070pnfyf\",\"arn:aws:s3:::gocathlab-healthlake-fhir-source-070pnfyf/*\",\"arn:aws:s3:::gocathlab-healthlake-staging-070pnfyf\",\"arn:aws:s3:::gocathlab-healthlake-staging-070pnfyf/*\"]},{\"Action\":[\"iam:PassRole\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:iam::365528423741:role/gocathlab-healthlake-healthlake-import-role\"}],\"Version\":\"2012-10-17\"}",
            "policy_id": "ANPAVKGZRDU6TYRN5NYMX",
            "tags": {},
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Project": "GoCathLab-HealthLake"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.healthlake_import_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.healthlake_staging",
            "awscc_healthlake_fhir_datastore.main",
            "data.aws_caller_identity.current",
            "data.aws_region.current",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "nlp_lambda_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-nlp-lambda-policy",
            "attachment_count": 1,
            "description": "Policy for NLP Lambda functions",
            "id": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-nlp-lambda-policy",
            "name": "gocathlab-healthlake-nlp-lambda-policy",
            "name_prefix": "",
            "path": "/",
            "policy": "{\"Statement\":[{\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:logs:*:*:*\"},{\"Action\":[\"s3:GetObject\",\"s3:PutObject\",\"s3:DeleteObject\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:s3:::gocathlab-healthlake-nlp-input-070pnfyf/*\",\"arn:aws:s3:::gocathlab-healthlake-nlp-output-070pnfyf/*\",\"arn:aws:s3:::gocathlab-healthlake-audio-input-070pnfyf/*\",\"arn:aws:s3:::gocathlab-healthlake-fhir-source-070pnfyf/*\"]},{\"Action\":[\"s3:ListBucket\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:s3:::gocathlab-healthlake-nlp-input-070pnfyf\",\"arn:aws:s3:::gocathlab-healthlake-nlp-output-070pnfyf\",\"arn:aws:s3:::gocathlab-healthlake-audio-input-070pnfyf\",\"arn:aws:s3:::gocathlab-healthlake-fhir-source-070pnfyf\"]},{\"Action\":[\"comprehendmedical:DetectEntitiesV2\",\"comprehendmedical:DetectPHI\",\"comprehendmedical:InferICD10CM\",\"comprehendmedical:InferRxNorm\",\"comprehendmedical:InferSNOMEDCT\"],\"Effect\":\"Allow\",\"Resource\":\"*\"},{\"Action\":[\"transcribe:StartMedicalTranscriptionJob\",\"transcribe:GetMedicalTranscriptionJob\",\"transcribe:ListMedicalTranscriptionJobs\"],\"Effect\":\"Allow\",\"Resource\":\"*\"},{\"Action\":[\"healthlake:*\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:healthlake:us-east-1:365528423741:datastore/fhir/bc5ab8737e204a4d06d385e5664938f5\",\"arn:aws:healthlake:us-east-1:365528423741:datastore/fhir/bc5ab8737e204a4d06d385e5664938f5/*\"]}],\"Version\":\"2012-10-17\"}",
            "policy_id": "ANPAVKGZRDU6Z37P47OG3",
            "tags": {},
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Project": "GoCathLab-HealthLake"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "gocathlab_healthlake_access",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::365528423741:role/gocathlab-healthlake-client-access-role",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Condition\":{\"StringEquals\":{\"sts:ExternalId\":\"gocathlab-healthlake-access\"}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::365528423741:root\"}}],\"Version\":\"2012-10-17\"}",
            "create_date": "2025-06-06T12:30:15Z",
            "description": "",
            "force_detach_policies": false,
            "id": "gocathlab-healthlake-client-access-role",
            "inline_policy": [],
            "managed_policy_arns": [
              "arn:aws:iam::365528423741:policy/gocathlab-healthlake-client-read-policy"
            ],
            "max_session_duration": 3600,
            "name": "gocathlab-healthlake-client-access-role",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": "",
            "tags": {
              "Name": "gocathlab-healthlake-client-access-role"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "gocathlab-healthlake-client-access-role",
              "Project": "GoCathLab-HealthLake"
            },
            "unique_id": "AROAVKGZRDU6U7NNSIJ36"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.aws_caller_identity.current"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "healthlake_datastore_role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::365528423741:role/gocathlab-healthlake-healthlake-datastore-role",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"healthlake.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}",
            "create_date": "2025-06-06T12:30:15Z",
            "description": "",
            "force_detach_policies": false,
            "id": "gocathlab-healthlake-healthlake-datastore-role",
            "inline_policy": [],
            "managed_policy_arns": [
              "arn:aws:iam::365528423741:policy/gocathlab-healthlake-healthlake-logging-policy"
            ],
            "max_session_duration": 3600,
            "name": "gocathlab-healthlake-healthlake-datastore-role",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": "",
            "tags": {
              "Name": "gocathlab-healthlake-healthlake-datastore-role"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "gocathlab-healthlake-healthlake-datastore-role",
              "Project": "GoCathLab-HealthLake"
            },
            "unique_id": "AROAVKGZRDU64W6LHID3O"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "healthlake_import_role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::365528423741:role/gocathlab-healthlake-healthlake-import-role",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"healthlake.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}",
            "create_date": "2025-06-06T12:30:15Z",
            "description": "",
            "force_detach_policies": false,
            "id": "gocathlab-healthlake-healthlake-import-role",
            "inline_policy": [],
            "managed_policy_arns": [
              "arn:aws:iam::365528423741:policy/gocathlab-healthlake-healthlake-import-policy"
            ],
            "max_session_duration": 3600,
            "name": "gocathlab-healthlake-healthlake-import-role",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": "",
            "tags": {
              "Name": "gocathlab-healthlake-healthlake-import-role"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "gocathlab-healthlake-healthlake-import-role",
              "Project": "GoCathLab-HealthLake"
            },
            "unique_id": "AROAVKGZRDU6VAXTKL3KH"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "lambda_import_role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::365528423741:role/gocathlab-healthlake-lambda-import-role",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}",
            "create_date": "2025-06-06T12:30:15Z",
            "description": "",
            "force_detach_policies": false,
            "id": "gocathlab-healthlake-lambda-import-role",
            "inline_policy": [],
            "managed_policy_arns": [
              "arn:aws:iam::365528423741:policy/gocathlab-healthlake-lambda-import-policy"
            ],
            "max_session_duration": 3600,
            "name": "gocathlab-healthlake-lambda-import-role",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": "",
            "tags": {
              "Name": "gocathlab-healthlake-lambda-import-role"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "gocathlab-healthlake-lambda-import-role",
              "Project": "GoCathLab-HealthLake"
            },
            "unique_id": "AROAVKGZRDU6Y2NDGTBB6"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "nlp_lambda_role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::365528423741:role/gocathlab-healthlake-nlp-lambda-role",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}",
            "create_date": "2025-06-06T13:15:19Z",
            "description": "",
            "force_detach_policies": false,
            "id": "gocathlab-healthlake-nlp-lambda-role",
            "inline_policy": [],
            "managed_policy_arns": [
              "arn:aws:iam::365528423741:policy/gocathlab-healthlake-nlp-lambda-policy"
            ],
            "max_session_duration": 3600,
            "name": "gocathlab-healthlake-nlp-lambda-role",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": "",
            "tags": {
              "Name": "NLP Lambda Execution Role",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "NLP Lambda Execution Role",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            },
            "unique_id": "AROAVKGZRDU64Q5YZZ5FV"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "gocathlab_healthlake_read_attachment",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "gocathlab-healthlake-client-access-role-20250606123654426400000004",
            "policy_arn": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-client-read-policy",
            "role": "gocathlab-healthlake-client-access-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.gocathlab_healthlake_read_policy",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_role.gocathlab_healthlake_access",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "awscc_healthlake_fhir_datastore.main",
            "data.aws_caller_identity.current"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "healthlake_import_attachment",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "gocathlab-healthlake-healthlake-import-role-20250606123019762300000002",
            "policy_arn": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-healthlake-import-policy",
            "role": "gocathlab-healthlake-healthlake-import-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_policy.healthlake_import_policy",
            "aws_iam_role.healthlake_import_role",
            "aws_s3_bucket.healthlake_staging",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "healthlake_logging_attachment",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "gocathlab-healthlake-healthlake-datastore-role-20250606123016709900000001",
            "policy_arn": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-healthlake-logging-policy",
            "role": "gocathlab-healthlake-healthlake-datastore-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_role.healthlake_datastore_role"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "lambda_import_attachment",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "gocathlab-healthlake-lambda-import-role-20250606123654423600000003",
            "policy_arn": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-lambda-import-policy",
            "role": "gocathlab-healthlake-lambda-import-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.lambda_import_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.healthlake_import_role",
            "aws_iam_role.lambda_import_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.healthlake_staging",
            "awscc_healthlake_fhir_datastore.main",
            "data.aws_caller_identity.current",
            "data.aws_region.current",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "nlp_lambda_policy_attachment",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "gocathlab-healthlake-nlp-lambda-role-20250606131523087900000001",
            "policy_arn": "arn:aws:iam::365528423741:policy/gocathlab-healthlake-nlp-lambda-policy",
            "role": "gocathlab-healthlake-nlp-lambda-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "audio_transcription",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architectures": [
              "x86_64"
            ],
            "arn": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-audio-transcription",
            "code_sha256": "uT/8IdlJMY2droPCbIdGY9xY6vRXTQzOskvrNKbHc5Y=",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "",
            "environment": [
              {
                "variables": {
                  "NLP_OUTPUT_BUCKET": "gocathlab-healthlake-nlp-output-070pnfyf",
                  "TRANSCRIPTION_RESULTS_BUCKET": "gocathlab-healthlake-nlp-output-070pnfyf"
                }
              }
            ],
            "ephemeral_storage": [
              {
                "size": 512
              }
            ],
            "file_system_config": [],
            "filename": "audio_transcription.zip",
            "function_name": "gocathlab-healthlake-audio-transcription",
            "handler": "index.handler",
            "id": "gocathlab-healthlake-audio-transcription",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-audio-transcription/invocations",
            "kms_key_arn": "",
            "last_modified": "2025-06-06T13:15:32.520+0000",
            "layers": [],
            "logging_config": [
              {
                "application_log_level": "",
                "log_format": "Text",
                "log_group": "/aws/lambda/gocathlab-healthlake-audio-transcription",
                "system_log_level": ""
              }
            ],
            "memory_size": 128,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-audio-transcription:$LATEST",
            "qualified_invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-audio-transcription:$LATEST/invocations",
            "replace_security_groups_on_destroy": null,
            "replacement_security_group_ids": null,
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::365528423741:role/gocathlab-healthlake-nlp-lambda-role",
            "runtime": "python3.9",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "skip_destroy": false,
            "snap_start": [],
            "source_code_hash": "",
            "source_code_size": 3766,
            "tags": {
              "Name": "Audio Transcription Processor",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "Audio Transcription Processor",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            },
            "timeout": 300,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.nlp_lambda_policy_attachment",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip_audio_transcription",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "clinical_notes_nlp",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architectures": [
              "x86_64"
            ],
            "arn": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-clinical-notes-nlp",
            "code_sha256": "FwnWs70Dwdby6gyuCFnIlNvBMBhvvBQTJJKlGaegWIQ=",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "",
            "environment": [
              {
                "variables": {
                  "DATASTORE_ID": "bc5ab8737e204a4d06d385e5664938f5",
                  "HEALTHLAKE_ENDPOINT": "https://healthlake.us-east-1.amazonaws.com/datastore/bc5ab8737e204a4d06d385e5664938f5/r4/",
                  "NLP_OUTPUT_BUCKET": "gocathlab-healthlake-nlp-output-070pnfyf"
                }
              }
            ],
            "ephemeral_storage": [
              {
                "size": 512
              }
            ],
            "file_system_config": [],
            "filename": "clinical_notes_nlp.zip",
            "function_name": "gocathlab-healthlake-clinical-notes-nlp",
            "handler": "index.handler",
            "id": "gocathlab-healthlake-clinical-notes-nlp",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-clinical-notes-nlp/invocations",
            "kms_key_arn": "",
            "last_modified": "2025-06-06T13:15:25.825+0000",
            "layers": [],
            "logging_config": [
              {
                "application_log_level": "",
                "log_format": "Text",
                "log_group": "/aws/lambda/gocathlab-healthlake-clinical-notes-nlp",
                "system_log_level": ""
              }
            ],
            "memory_size": 128,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-clinical-notes-nlp:$LATEST",
            "qualified_invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-clinical-notes-nlp:$LATEST/invocations",
            "replace_security_groups_on_destroy": null,
            "replacement_security_group_ids": null,
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::365528423741:role/gocathlab-healthlake-nlp-lambda-role",
            "runtime": "python3.9",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "skip_destroy": false,
            "snap_start": [],
            "source_code_hash": "",
            "source_code_size": 2299,
            "tags": {
              "Name": "Clinical Notes NLP Processor",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "Clinical Notes NLP Processor",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            },
            "timeout": 300,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.nlp_lambda_policy_attachment",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip_clinical_notes_nlp",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "fhir_resource_creator",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architectures": [
              "x86_64"
            ],
            "arn": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-fhir-resource-creator",
            "code_sha256": "2f7g+k5LmFYCFvZLz1Xydlyy5yWK6EHlcRTy796ADH8=",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "",
            "environment": [
              {
                "variables": {
                  "DATASTORE_ID": "bc5ab8737e204a4d06d385e5664938f5",
                  "HEALTHLAKE_ENDPOINT": "https://healthlake.us-east-1.amazonaws.com/datastore/bc5ab8737e204a4d06d385e5664938f5/r4/",
                  "NLP_OUTPUT_BUCKET": "gocathlab-healthlake-nlp-output-070pnfyf"
                }
              }
            ],
            "ephemeral_storage": [
              {
                "size": 512
              }
            ],
            "file_system_config": [],
            "filename": "fhir_resource_creator.zip",
            "function_name": "gocathlab-healthlake-fhir-resource-creator",
            "handler": "index.handler",
            "id": "gocathlab-healthlake-fhir-resource-creator",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-fhir-resource-creator/invocations",
            "kms_key_arn": "",
            "last_modified": "2025-06-06T15:51:09.000+0000",
            "layers": [],
            "logging_config": [
              {
                "application_log_level": "",
                "log_format": "Text",
                "log_group": "/aws/lambda/gocathlab-healthlake-fhir-resource-creator",
                "system_log_level": ""
              }
            ],
            "memory_size": 128,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-fhir-resource-creator:$LATEST",
            "qualified_invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-fhir-resource-creator:$LATEST/invocations",
            "replace_security_groups_on_destroy": null,
            "replacement_security_group_ids": null,
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::365528423741:role/gocathlab-healthlake-nlp-lambda-role",
            "runtime": "python3.9",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "skip_destroy": false,
            "snap_start": [],
            "source_code_hash": "",
            "source_code_size": 5421,
            "tags": {
              "Name": "FHIR Resource Creator",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "FHIR Resource Creator",
              "Project": "gocathlab-healthlake",
              "Week": "3"
            },
            "timeout": 300,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.nlp_lambda_policy_attachment",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip_fhir_resource_creator",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "healthlake_import_orchestrator",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architectures": [
              "x86_64"
            ],
            "arn": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-import-orchestrator",
            "code_sha256": "x+3oJXDA3JwJMPmxCJq9kHow4OZ0QHowm27TQSJly0g=",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "",
            "environment": [
              {
                "variables": {
                  "HEALTHLAKE_DATASTORE_ID": "bc5ab8737e204a4d06d385e5664938f5",
                  "HEALTHLAKE_IMPORT_ROLE_ARN": "arn:aws:iam::365528423741:role/gocathlab-healthlake-healthlake-import-role",
                  "SOURCE_BUCKET": "gocathlab-healthlake-fhir-source-070pnfyf",
                  "STAGING_BUCKET": "gocathlab-healthlake-staging-070pnfyf"
                }
              }
            ],
            "ephemeral_storage": [
              {
                "size": 512
              }
            ],
            "file_system_config": [],
            "filename": "healthlake_import.zip",
            "function_name": "gocathlab-healthlake-import-orchestrator",
            "handler": "lambda_function.lambda_handler",
            "id": "gocathlab-healthlake-import-orchestrator",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-import-orchestrator/invocations",
            "kms_key_arn": "",
            "last_modified": "2025-06-06T17:39:01.387+0000",
            "layers": [],
            "logging_config": [
              {
                "application_log_level": "",
                "log_format": "Text",
                "log_group": "/aws/lambda/gocathlab-healthlake-import-orchestrator",
                "system_log_level": ""
              }
            ],
            "memory_size": 128,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-import-orchestrator:$LATEST",
            "qualified_invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-import-orchestrator:$LATEST/invocations",
            "replace_security_groups_on_destroy": null,
            "replacement_security_group_ids": null,
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::365528423741:role/gocathlab-healthlake-lambda-import-role",
            "runtime": "python3.9",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "skip_destroy": false,
            "snap_start": [],
            "source_code_hash": "",
            "source_code_size": 2352,
            "tags": {
              "LastUpdated": "2025-06-06T17:39:00Z",
              "Name": "gocathlab-healthlake-import-orchestrator"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "LastUpdated": "2025-06-06T17:39:00Z",
              "ManagedBy": "Terraform",
              "Name": "gocathlab-healthlake-import-orchestrator",
              "Project": "GoCathLab-HealthLake"
            },
            "timeout": 300,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.lambda_import_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.healthlake_import_role",
            "aws_iam_role.lambda_import_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.lambda_import_attachment",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.healthlake_staging",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip",
            "data.aws_caller_identity.current",
            "data.aws_region.current",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "allow_s3_invoke",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "gocathlab-healthlake-import-orchestrator",
            "function_url_auth_type": null,
            "id": "AllowExecutionFromS3Bucket",
            "principal": "s3.amazonaws.com",
            "principal_org_id": null,
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:s3:::gocathlab-healthlake-fhir-source-070pnfyf",
            "statement_id": "AllowExecutionFromS3Bucket",
            "statement_id_prefix": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.lambda_import_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.healthlake_import_role",
            "aws_iam_role.lambda_import_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.lambda_import_attachment",
            "aws_lambda_function.healthlake_import_orchestrator",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.healthlake_staging",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip",
            "data.aws_caller_identity.current",
            "data.aws_region.current",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "audio_input_s3_trigger",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "gocathlab-healthlake-audio-transcription",
            "function_url_auth_type": null,
            "id": "AllowExecutionFromS3AudioInput",
            "principal": "s3.amazonaws.com",
            "principal_org_id": null,
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:s3:::gocathlab-healthlake-audio-input-070pnfyf",
            "statement_id": "AllowExecutionFromS3AudioInput",
            "statement_id_prefix": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.nlp_lambda_policy_attachment",
            "aws_lambda_function.audio_transcription",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip_audio_transcription",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "nlp_input_s3_trigger",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "gocathlab-healthlake-clinical-notes-nlp",
            "function_url_auth_type": null,
            "id": "AllowExecutionFromS3NLPInput",
            "principal": "s3.amazonaws.com",
            "principal_org_id": null,
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:s3:::gocathlab-healthlake-nlp-input-070pnfyf",
            "statement_id": "AllowExecutionFromS3NLPInput",
            "statement_id_prefix": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.nlp_lambda_policy_attachment",
            "aws_lambda_function.clinical_notes_nlp",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip_clinical_notes_nlp",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "nlp_output_s3_trigger",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "gocathlab-healthlake-fhir-resource-creator",
            "function_url_auth_type": null,
            "id": "AllowExecutionFromS3NLPOutput",
            "principal": "s3.amazonaws.com",
            "principal_org_id": null,
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:s3:::gocathlab-healthlake-nlp-output-070pnfyf",
            "statement_id": "AllowExecutionFromS3NLPOutput",
            "statement_id_prefix": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.nlp_lambda_policy_attachment",
            "aws_lambda_function.fhir_resource_creator",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip_fhir_resource_creator",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "audio_input",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": null,
            "arn": "arn:aws:s3:::gocathlab-healthlake-audio-input-070pnfyf",
            "bucket": "gocathlab-healthlake-audio-input-070pnfyf",
            "bucket_domain_name": "gocathlab-healthlake-audio-input-070pnfyf.s3.amazonaws.com",
            "bucket_prefix": "",
            "bucket_regional_domain_name": "gocathlab-healthlake-audio-input-070pnfyf.s3.us-east-1.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [
              {
                "id": "942d66fb37419d873c9fc17f67c4114c59202d4eaf84cdf9a74908bc344674fe",
                "permissions": [
                  "FULL_CONTROL"
                ],
                "type": "CanonicalUser",
                "uri": ""
              }
            ],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "gocathlab-healthlake-audio-input-070pnfyf",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "object_lock_enabled": false,
            "policy": "",
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "",
                        "sse_algorithm": "AES256"
                      }
                    ],
                    "bucket_key_enabled": false
                  }
                ]
              }
            ],
            "tags": {
              "Environment": "dev",
              "Name": "Audio Input Bucket",
              "Project": "gocathlab-healthlake",
              "Purpose": "Cath Lab Audio Recordings",
              "Week": "3"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "Audio Input Bucket",
              "Project": "gocathlab-healthlake",
              "Purpose": "Cath Lab Audio Recordings",
              "Week": "3"
            },
            "timeouts": null,
            "versioning": [
              {
                "enabled": true,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInJlYWQiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "fhir_source_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": null,
            "arn": "arn:aws:s3:::gocathlab-healthlake-fhir-source-070pnfyf",
            "bucket": "gocathlab-healthlake-fhir-source-070pnfyf",
            "bucket_domain_name": "gocathlab-healthlake-fhir-source-070pnfyf.s3.amazonaws.com",
            "bucket_prefix": "",
            "bucket_regional_domain_name": "gocathlab-healthlake-fhir-source-070pnfyf.s3.us-east-1.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [
              {
                "id": "942d66fb37419d873c9fc17f67c4114c59202d4eaf84cdf9a74908bc344674fe",
                "permissions": [
                  "FULL_CONTROL"
                ],
                "type": "CanonicalUser",
                "uri": ""
              }
            ],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "gocathlab-healthlake-fhir-source-070pnfyf",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "object_lock_enabled": false,
            "policy": "",
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "",
                        "sse_algorithm": "AES256"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {
              "DataType": "Cardiovascular-FHIR",
              "HIPAAData": "true",
              "Name": "gocathlab-healthlake-fhir-source",
              "Purpose": "FHIR Source Data Storage"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "DataType": "Cardiovascular-FHIR",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "HIPAAData": "true",
              "ManagedBy": "Terraform",
              "Name": "gocathlab-healthlake-fhir-source",
              "Project": "GoCathLab-HealthLake",
              "Purpose": "FHIR Source Data Storage"
            },
            "timeouts": null,
            "versioning": [
              {
                "enabled": true,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInJlYWQiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "healthlake_staging",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": null,
            "arn": "arn:aws:s3:::gocathlab-healthlake-staging-070pnfyf",
            "bucket": "gocathlab-healthlake-staging-070pnfyf",
            "bucket_domain_name": "gocathlab-healthlake-staging-070pnfyf.s3.amazonaws.com",
            "bucket_prefix": "",
            "bucket_regional_domain_name": "gocathlab-healthlake-staging-070pnfyf.s3.us-east-1.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [
              {
                "id": "942d66fb37419d873c9fc17f67c4114c59202d4eaf84cdf9a74908bc344674fe",
                "permissions": [
                  "FULL_CONTROL"
                ],
                "type": "CanonicalUser",
                "uri": ""
              }
            ],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "gocathlab-healthlake-staging-070pnfyf",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "object_lock_enabled": false,
            "policy": "",
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "",
                        "sse_algorithm": "AES256"
                      }
                    ],
                    "bucket_key_enabled": true
                  }
                ]
              }
            ],
            "tags": {
              "HIPAAData": "true",
              "Name": "gocathlab-healthlake-staging",
              "Purpose": "HealthLake Data Ingestion Staging"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "HIPAAData": "true",
              "ManagedBy": "Terraform",
              "Name": "gocathlab-healthlake-staging",
              "Project": "GoCathLab-HealthLake",
              "Purpose": "HealthLake Data Ingestion Staging"
            },
            "timeouts": null,
            "versioning": [
              {
                "enabled": true,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInJlYWQiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "nlp_input",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": null,
            "arn": "arn:aws:s3:::gocathlab-healthlake-nlp-input-070pnfyf",
            "bucket": "gocathlab-healthlake-nlp-input-070pnfyf",
            "bucket_domain_name": "gocathlab-healthlake-nlp-input-070pnfyf.s3.amazonaws.com",
            "bucket_prefix": "",
            "bucket_regional_domain_name": "gocathlab-healthlake-nlp-input-070pnfyf.s3.us-east-1.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [
              {
                "id": "942d66fb37419d873c9fc17f67c4114c59202d4eaf84cdf9a74908bc344674fe",
                "permissions": [
                  "FULL_CONTROL"
                ],
                "type": "CanonicalUser",
                "uri": ""
              }
            ],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "gocathlab-healthlake-nlp-input-070pnfyf",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "object_lock_enabled": false,
            "policy": "",
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "",
                        "sse_algorithm": "AES256"
                      }
                    ],
                    "bucket_key_enabled": false
                  }
                ]
              }
            ],
            "tags": {
              "Environment": "dev",
              "Name": "NLP Input Bucket",
              "Project": "gocathlab-healthlake",
              "Purpose": "Medical NLP Input Data",
              "Week": "3"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "NLP Input Bucket",
              "Project": "gocathlab-healthlake",
              "Purpose": "Medical NLP Input Data",
              "Week": "3"
            },
            "timeouts": null,
            "versioning": [
              {
                "enabled": true,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInJlYWQiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "nlp_output",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": null,
            "arn": "arn:aws:s3:::gocathlab-healthlake-nlp-output-070pnfyf",
            "bucket": "gocathlab-healthlake-nlp-output-070pnfyf",
            "bucket_domain_name": "gocathlab-healthlake-nlp-output-070pnfyf.s3.amazonaws.com",
            "bucket_prefix": "",
            "bucket_regional_domain_name": "gocathlab-healthlake-nlp-output-070pnfyf.s3.us-east-1.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [
              {
                "id": "942d66fb37419d873c9fc17f67c4114c59202d4eaf84cdf9a74908bc344674fe",
                "permissions": [
                  "FULL_CONTROL"
                ],
                "type": "CanonicalUser",
                "uri": ""
              }
            ],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "gocathlab-healthlake-nlp-output-070pnfyf",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "object_lock_enabled": false,
            "policy": "",
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "",
                        "sse_algorithm": "AES256"
                      }
                    ],
                    "bucket_key_enabled": false
                  }
                ]
              }
            ],
            "tags": {
              "Environment": "dev",
              "Name": "NLP Output Bucket",
              "Project": "gocathlab-healthlake",
              "Purpose": "Medical NLP Results",
              "Week": "3"
            },
            "tags_all": {
              "Client": "GoCathLab",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Name": "NLP Output Bucket",
              "Project": "gocathlab-healthlake",
              "Purpose": "Medical NLP Results",
              "Week": "3"
            },
            "timeouts": null,
            "versioning": [
              {
                "enabled": true,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInJlYWQiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_notification",
      "name": "audio_input_notification",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-audio-input-070pnfyf",
            "eventbridge": false,
            "id": "gocathlab-healthlake-audio-input-070pnfyf",
            "lambda_function": [
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "audio/",
                "filter_suffix": ".wav",
                "id": "tf-s3-lambda-20250606131539261700000003",
                "lambda_function_arn": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-audio-transcription"
              }
            ],
            "queue": [],
            "topic": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.nlp_lambda_policy_attachment",
            "aws_lambda_function.audio_transcription",
            "aws_lambda_permission.audio_input_s3_trigger",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip_audio_transcription",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_notification",
      "name": "fhir_data_upload",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-fhir-source-070pnfyf",
            "eventbridge": false,
            "id": "gocathlab-healthlake-fhir-source-070pnfyf",
            "lambda_function": [
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "",
                "filter_suffix": ".json",
                "id": "tf-s3-lambda-20250606123702240100000005",
                "lambda_function_arn": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-import-orchestrator"
              }
            ],
            "queue": [],
            "topic": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.lambda_import_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.healthlake_import_role",
            "aws_iam_role.lambda_import_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.lambda_import_attachment",
            "aws_lambda_function.healthlake_import_orchestrator",
            "aws_lambda_permission.allow_s3_invoke",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.healthlake_staging",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip",
            "data.aws_caller_identity.current",
            "data.aws_region.current",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_notification",
      "name": "nlp_input_notification",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-nlp-input-070pnfyf",
            "eventbridge": false,
            "id": "gocathlab-healthlake-nlp-input-070pnfyf",
            "lambda_function": [
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "clinical-notes/",
                "filter_suffix": ".txt",
                "id": "tf-s3-lambda-20250606131532524100000002",
                "lambda_function_arn": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-clinical-notes-nlp"
              }
            ],
            "queue": [],
            "topic": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.nlp_lambda_policy_attachment",
            "aws_lambda_function.clinical_notes_nlp",
            "aws_lambda_permission.nlp_input_s3_trigger",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip_clinical_notes_nlp",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_notification",
      "name": "nlp_output_notification",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-nlp-output-070pnfyf",
            "eventbridge": false,
            "id": "gocathlab-healthlake-nlp-output-070pnfyf",
            "lambda_function": [
              {
                "events": [
                  "s3:ObjectCreated:*"
                ],
                "filter_prefix": "processed/",
                "filter_suffix": ".json",
                "id": "tf-s3-lambda-20250606141251119200000001",
                "lambda_function_arn": "arn:aws:lambda:us-east-1:365528423741:function:gocathlab-healthlake-fhir-resource-creator"
              }
            ],
            "queue": [],
            "topic": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_policy.nlp_lambda_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role.nlp_lambda_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment",
            "aws_iam_role_policy_attachment.nlp_lambda_policy_attachment",
            "aws_lambda_function.fhir_resource_creator",
            "aws_lambda_permission.nlp_output_s3_trigger",
            "aws_s3_bucket.audio_input",
            "aws_s3_bucket.fhir_source_data",
            "aws_s3_bucket.nlp_input",
            "aws_s3_bucket.nlp_output",
            "awscc_healthlake_fhir_datastore.main",
            "data.archive_file.lambda_zip_fhir_resource_creator",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_public_access_block",
      "name": "fhir_source_pab",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "block_public_acls": true,
            "block_public_policy": true,
            "bucket": "gocathlab-healthlake-fhir-source-070pnfyf",
            "id": "gocathlab-healthlake-fhir-source-070pnfyf",
            "ignore_public_acls": true,
            "restrict_public_buckets": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.fhir_source_data",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_public_access_block",
      "name": "healthlake_staging_pab",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "block_public_acls": true,
            "block_public_policy": true,
            "bucket": "gocathlab-healthlake-staging-070pnfyf",
            "id": "gocathlab-healthlake-staging-070pnfyf",
            "ignore_public_acls": true,
            "restrict_public_buckets": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.healthlake_staging",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_server_side_encryption_configuration",
      "name": "audio_input_encryption",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-audio-input-070pnfyf",
            "expected_bucket_owner": "",
            "id": "gocathlab-healthlake-audio-input-070pnfyf",
            "rule": [
              {
                "apply_server_side_encryption_by_default": [
                  {
                    "kms_master_key_id": "",
                    "sse_algorithm": "AES256"
                  }
                ],
                "bucket_key_enabled": false
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.audio_input",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_server_side_encryption_configuration",
      "name": "fhir_source_encryption",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-fhir-source-070pnfyf",
            "expected_bucket_owner": "",
            "id": "gocathlab-healthlake-fhir-source-070pnfyf",
            "rule": [
              {
                "apply_server_side_encryption_by_default": [
                  {
                    "kms_master_key_id": "",
                    "sse_algorithm": "AES256"
                  }
                ],
                "bucket_key_enabled": true
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.fhir_source_data",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_server_side_encryption_configuration",
      "name": "healthlake_staging_encryption",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-staging-070pnfyf",
            "expected_bucket_owner": "",
            "id": "gocathlab-healthlake-staging-070pnfyf",
            "rule": [
              {
                "apply_server_side_encryption_by_default": [
                  {
                    "kms_master_key_id": "",
                    "sse_algorithm": "AES256"
                  }
                ],
                "bucket_key_enabled": true
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.healthlake_staging",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_server_side_encryption_configuration",
      "name": "nlp_input_encryption",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-nlp-input-070pnfyf",
            "expected_bucket_owner": "",
            "id": "gocathlab-healthlake-nlp-input-070pnfyf",
            "rule": [
              {
                "apply_server_side_encryption_by_default": [
                  {
                    "kms_master_key_id": "",
                    "sse_algorithm": "AES256"
                  }
                ],
                "bucket_key_enabled": false
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.nlp_input",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_server_side_encryption_configuration",
      "name": "nlp_output_encryption",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-nlp-output-070pnfyf",
            "expected_bucket_owner": "",
            "id": "gocathlab-healthlake-nlp-output-070pnfyf",
            "rule": [
              {
                "apply_server_side_encryption_by_default": [
                  {
                    "kms_master_key_id": "",
                    "sse_algorithm": "AES256"
                  }
                ],
                "bucket_key_enabled": false
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.nlp_output",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_versioning",
      "name": "audio_input_versioning",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-audio-input-070pnfyf",
            "expected_bucket_owner": "",
            "id": "gocathlab-healthlake-audio-input-070pnfyf",
            "mfa": null,
            "versioning_configuration": [
              {
                "mfa_delete": "",
                "status": "Enabled"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.audio_input",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_versioning",
      "name": "fhir_source_versioning",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-fhir-source-070pnfyf",
            "expected_bucket_owner": "",
            "id": "gocathlab-healthlake-fhir-source-070pnfyf",
            "mfa": null,
            "versioning_configuration": [
              {
                "mfa_delete": "",
                "status": "Enabled"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.fhir_source_data",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_versioning",
      "name": "healthlake_staging_versioning",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-staging-070pnfyf",
            "expected_bucket_owner": "",
            "id": "gocathlab-healthlake-staging-070pnfyf",
            "mfa": null,
            "versioning_configuration": [
              {
                "mfa_delete": "",
                "status": "Enabled"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.healthlake_staging",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_versioning",
      "name": "nlp_input_versioning",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-nlp-input-070pnfyf",
            "expected_bucket_owner": "",
            "id": "gocathlab-healthlake-nlp-input-070pnfyf",
            "mfa": null,
            "versioning_configuration": [
              {
                "mfa_delete": "",
                "status": "Enabled"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.nlp_input",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_versioning",
      "name": "nlp_output_versioning",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "gocathlab-healthlake-nlp-output-070pnfyf",
            "expected_bucket_owner": "",
            "id": "gocathlab-healthlake-nlp-output-070pnfyf",
            "mfa": null,
            "versioning_configuration": [
              {
                "mfa_delete": "",
                "status": "Enabled"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.nlp_output",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_object",
      "name": "sample_observation_bp",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": null,
            "arn": "arn:aws:s3:::gocathlab-healthlake-fhir-source-070pnfyf/observations/blood-pressure-cv001-20241201.json",
            "bucket": "gocathlab-healthlake-fhir-source-070pnfyf",
            "bucket_key_enabled": false,
            "cache_control": "",
            "checksum_algorithm": null,
            "checksum_crc32": "",
            "checksum_crc32c": "",
            "checksum_crc64nvme": "",
            "checksum_sha1": "",
            "checksum_sha256": "",
            "content": "{\"category\":[{\"coding\":[{\"code\":\"vital-signs\",\"display\":\"Vital Signs\",\"system\":\"http://terminology.hl7.org/CodeSystem/observation-category\"}]}],\"code\":{\"coding\":[{\"code\":\"85354-9\",\"display\":\"Blood pressure panel with all children optional\",\"system\":\"http://loinc.org\"}]},\"component\":[{\"code\":{\"coding\":[{\"code\":\"8480-6\",\"display\":\"Systolic blood pressure\",\"system\":\"http://loinc.org\"}]},\"valueQuantity\":{\"code\":\"mm[Hg]\",\"system\":\"http://unitsofmeasure.org\",\"unit\":\"mmHg\",\"value\":150}},{\"code\":{\"coding\":[{\"code\":\"8462-4\",\"display\":\"Diastolic blood pressure\",\"system\":\"http://loinc.org\"}]},\"valueQuantity\":{\"code\":\"mm[Hg]\",\"system\":\"http://unitsofmeasure.org\",\"unit\":\"mmHg\",\"value\":95}}],\"effectiveDateTime\":\"2024-12-01T09:30:00Z\",\"id\":\"blood-pressure-cv001-20241201\",\"interpretation\":[{\"coding\":[{\"code\":\"H\",\"display\":\"High\",\"system\":\"http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation\"}]}],\"meta\":{\"profile\":[\"http://hl7.org/fhir/us/core/StructureDefinition/us-core-blood-pressure\"]},\"resourceType\":\"Observation\",\"status\":\"final\",\"subject\":{\"display\":\"Robert Johnson\",\"reference\":\"Patient/cardiovascular-patient-001\"}}",
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "application/json",
            "etag": "2728a86bb9ec728e4fd6220ba14fd91c",
            "force_destroy": false,
            "id": "observations/blood-pressure-cv001-20241201.json",
            "key": "observations/blood-pressure-cv001-20241201.json",
            "kms_key_id": null,
            "metadata": {},
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "override_provider": [],
            "server_side_encryption": "AES256",
            "source": null,
            "source_hash": null,
            "storage_class": "STANDARD",
            "tags": {
              "Category": "VitalSigns",
              "DataType": "FHIR-Observation",
              "TestType": "BloodPressure"
            },
            "tags_all": {
              "Category": "VitalSigns",
              "Client": "GoCathLab",
              "DataType": "FHIR-Observation",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Project": "GoCathLab-HealthLake",
              "TestType": "BloodPressure"
            },
            "version_id": "EPEvuDvz9UpfpFCA_mzDVINesAd9U5xc",
            "website_redirect": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.fhir_source_data",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_object",
      "name": "sample_observation_cholesterol",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": null,
            "arn": "arn:aws:s3:::gocathlab-healthlake-fhir-source-070pnfyf/observations/cholesterol-cv001-20241201.json",
            "bucket": "gocathlab-healthlake-fhir-source-070pnfyf",
            "bucket_key_enabled": false,
            "cache_control": "",
            "checksum_algorithm": null,
            "checksum_crc32": "",
            "checksum_crc32c": "",
            "checksum_crc64nvme": "",
            "checksum_sha1": "",
            "checksum_sha256": "",
            "content": "{\"category\":[{\"coding\":[{\"code\":\"laboratory\",\"display\":\"Laboratory\",\"system\":\"http://terminology.hl7.org/CodeSystem/observation-category\"}]}],\"code\":{\"coding\":[{\"code\":\"2093-3\",\"display\":\"Cholesterol [Mass/Volume] in Serum or Plasma\",\"system\":\"http://loinc.org\"}]},\"effectiveDateTime\":\"2024-12-01T09:30:00Z\",\"id\":\"cholesterol-cv001-20241201\",\"interpretation\":[{\"coding\":[{\"code\":\"H\",\"display\":\"High\",\"system\":\"http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation\"}]}],\"meta\":{\"profile\":[\"http://hl7.org/fhir/us/core/StructureDefinition/us-core-observation-lab\"]},\"referenceRange\":[{\"high\":{\"code\":\"mg/dL\",\"system\":\"http://unitsofmeasure.org\",\"unit\":\"mg/dL\",\"value\":200},\"low\":{\"code\":\"mg/dL\",\"system\":\"http://unitsofmeasure.org\",\"unit\":\"mg/dL\",\"value\":0},\"text\":\"Desirable: \\u003c200 mg/dL\"}],\"resourceType\":\"Observation\",\"status\":\"final\",\"subject\":{\"display\":\"Robert Johnson\",\"reference\":\"Patient/cardiovascular-patient-001\"},\"valueQuantity\":{\"code\":\"mg/dL\",\"system\":\"http://unitsofmeasure.org\",\"unit\":\"mg/dL\",\"value\":245}}",
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "application/json",
            "etag": "a4a5773bc25408c6c6cfbfbccb7d91cf",
            "force_destroy": false,
            "id": "observations/cholesterol-cv001-20241201.json",
            "key": "observations/cholesterol-cv001-20241201.json",
            "kms_key_id": null,
            "metadata": {},
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "override_provider": [],
            "server_side_encryption": "AES256",
            "source": null,
            "source_hash": null,
            "storage_class": "STANDARD",
            "tags": {
              "Category": "Laboratory",
              "DataType": "FHIR-Observation",
              "TestType": "Cholesterol"
            },
            "tags_all": {
              "Category": "Laboratory",
              "Client": "GoCathLab",
              "DataType": "FHIR-Observation",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Project": "GoCathLab-HealthLake",
              "TestType": "Cholesterol"
            },
            "version_id": "1i0okkDB_eKL359HJcsf0Jll4uYiPD_A",
            "website_redirect": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.fhir_source_data",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_object",
      "name": "sample_patient",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": null,
            "arn": "arn:aws:s3:::gocathlab-healthlake-fhir-source-070pnfyf/patients/cardiovascular-patient-001.json",
            "bucket": "gocathlab-healthlake-fhir-source-070pnfyf",
            "bucket_key_enabled": false,
            "cache_control": "",
            "checksum_algorithm": null,
            "checksum_crc32": "",
            "checksum_crc32c": "",
            "checksum_crc64nvme": "",
            "checksum_sha1": "",
            "checksum_sha256": "",
            "content": "{\"active\":true,\"address\":[{\"city\":\"Bellingham\",\"country\":\"US\",\"line\":[\"123 Heart Lane\"],\"postalCode\":\"98225\",\"state\":\"WA\",\"type\":\"both\",\"use\":\"home\"}],\"birthDate\":\"1965-03-15\",\"gender\":\"male\",\"id\":\"cardiovascular-patient-001\",\"identifier\":[{\"system\":\"http://gocathlab.com/patient-id\",\"type\":{\"coding\":[{\"code\":\"MR\",\"display\":\"Medical Record Number\",\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\"}]},\"use\":\"usual\",\"value\":\"CV-001\"}],\"maritalStatus\":{\"coding\":[{\"code\":\"M\",\"display\":\"Married\",\"system\":\"http://terminology.hl7.org/CodeSystem/v3-MaritalStatus\"}]},\"meta\":{\"profile\":[\"http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient\"]},\"name\":[{\"family\":\"Johnson\",\"given\":[\"Robert\",\"Michael\"],\"use\":\"official\"}],\"resourceType\":\"Patient\",\"telecom\":[{\"system\":\"phone\",\"use\":\"home\",\"value\":\"(555) 123-4567\"}]}",
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "application/json",
            "etag": "305f69c0bb7cd07b031b2f94c4f191dc",
            "force_destroy": false,
            "id": "patients/cardiovascular-patient-001.json",
            "key": "patients/cardiovascular-patient-001.json",
            "kms_key_id": null,
            "metadata": {},
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "override_provider": [],
            "server_side_encryption": "AES256",
            "source": null,
            "source_hash": null,
            "storage_class": "STANDARD",
            "tags": {
              "Category": "Cardiovascular",
              "DataType": "FHIR-Patient"
            },
            "tags_all": {
              "Category": "Cardiovascular",
              "Client": "GoCathLab",
              "DataType": "FHIR-Patient",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "Project": "GoCathLab-HealthLake"
            },
            "version_id": "pLRzgUAlDU3naGYce9ZTzU6_zdo1vKfn",
            "website_redirect": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.fhir_source_data",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_object",
      "name": "sample_procedure",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": null,
            "arn": "arn:aws:s3:::gocathlab-healthlake-fhir-source-070pnfyf/procedures/cardiac-cath-cv001-20241205.json",
            "bucket": "gocathlab-healthlake-fhir-source-070pnfyf",
            "bucket_key_enabled": false,
            "cache_control": "",
            "checksum_algorithm": null,
            "checksum_crc32": "",
            "checksum_crc32c": "",
            "checksum_crc64nvme": "",
            "checksum_sha1": "",
            "checksum_sha256": "",
            "content": "{\"category\":{\"coding\":[{\"code\":\"387713003\",\"display\":\"Surgical procedure\",\"system\":\"http://snomed.info/sct\"}]},\"code\":{\"coding\":[{\"code\":\"93458\",\"display\":\"Catheter placement in coronary artery(s) for coronary angiography, including intraprocedural injection(s) for coronary angiography, imaging supervision and interpretation; with left heart catheterization including intraprocedural injection(s) for left ventriculography, when performed\",\"system\":\"http://www.ama-assn.org/go/cpt\"},{\"code\":\"41976001\",\"display\":\"Cardiac catheterization\",\"system\":\"http://snomed.info/sct\"}]},\"id\":\"cardiac-cath-cv001-20241205\",\"location\":{\"display\":\"GoCathLab Cardiac Catheterization Laboratory\"},\"meta\":{\"profile\":[\"http://hl7.org/fhir/us/core/StructureDefinition/us-core-procedure\"]},\"note\":[{\"text\":\"Successful left heart catheterization with coronary angiography. Moderate stenosis found in LAD. Patient tolerated procedure well.\"}],\"outcome\":{\"coding\":[{\"code\":\"385669000\",\"display\":\"Successful\",\"system\":\"http://snomed.info/sct\"}]},\"performedDateTime\":\"2024-12-05T14:30:00Z\",\"performer\":[{\"actor\":{\"display\":\"Dr. Sarah Cardiovascular, MD\"},\"role\":{\"coding\":[{\"code\":\"17561000\",\"display\":\"Cardiologist\",\"system\":\"http://snomed.info/sct\"}]}}],\"reasonCode\":[{\"coding\":[{\"code\":\"194828000\",\"display\":\"Angina\",\"system\":\"http://snomed.info/sct\"}]}],\"resourceType\":\"Procedure\",\"status\":\"completed\",\"subject\":{\"display\":\"Robert Johnson\",\"reference\":\"Patient/cardiovascular-patient-001\"}}",
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "application/json",
            "etag": "312c1eb2ada869cc9d3fc97568a60c17",
            "force_destroy": false,
            "id": "procedures/cardiac-cath-cv001-20241205.json",
            "key": "procedures/cardiac-cath-cv001-20241205.json",
            "kms_key_id": null,
            "metadata": {},
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "override_provider": [],
            "server_side_encryption": "AES256",
            "source": null,
            "source_hash": null,
            "storage_class": "STANDARD",
            "tags": {
              "Category": "Cardiovascular",
              "DataType": "FHIR-Procedure",
              "ProcedureType": "Catheterization"
            },
            "tags_all": {
              "Category": "Cardiovascular",
              "Client": "GoCathLab",
              "DataType": "FHIR-Procedure",
              "Engagement": "Week-1-Foundation",
              "Environment": "dev",
              "HIPAA": "Eligible",
              "ManagedBy": "Terraform",
              "ProcedureType": "Catheterization",
              "Project": "GoCathLab-HealthLake"
            },
            "version_id": "PcI7sNjxZjvp._n1y5tMBlxwc1eycWVs",
            "website_redirect": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.fhir_source_data",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "awscc_healthlake_fhir_datastore",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/awscc\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "created_at": {
              "nanos": 199000000,
              "seconds": "1749213319"
            },
            "datastore_arn": "arn:aws:healthlake:us-east-1:365528423741:datastore/fhir/bc5ab8737e204a4d06d385e5664938f5",
            "datastore_endpoint": "https://healthlake.us-east-1.amazonaws.com/datastore/bc5ab8737e204a4d06d385e5664938f5/r4/",
            "datastore_id": "bc5ab8737e204a4d06d385e5664938f5",
            "datastore_name": "gocathlab-healthlake-fhir-datastore",
            "datastore_status": "ACTIVE",
            "datastore_type_version": "R4",
            "id": "bc5ab8737e204a4d06d385e5664938f5",
            "identity_provider_configuration": {
              "authorization_strategy": "AWS_AUTH",
              "fine_grained_authorization_enabled": false,
              "idp_lambda_arn": null,
              "metadata": null
            },
            "preload_data_config": {
              "preload_data_type": "SYNTHEA"
            },
            "sse_configuration": {
              "kms_encryption_config": {
                "cmk_type": "AWS_OWNED_KMS_KEY",
                "kms_key_id": null
              }
            },
            "tags": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "aws_cloudwatch_log_group.healthlake_logs",
            "aws_iam_policy.healthlake_logging_policy",
            "aws_iam_role.healthlake_datastore_role",
            "aws_iam_role_policy_attachment.healthlake_logging_attachment"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "bucket_suffix",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "id": "070pnfyf",
            "keepers": null,
            "length": 8,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": null,
            "result": "070pnfyf",
            "special": false,
            "upper": false
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}
